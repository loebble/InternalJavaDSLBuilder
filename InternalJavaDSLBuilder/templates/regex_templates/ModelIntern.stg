BuilderTemplate(packageName, genModel) ::= <<
<! Template for DSLGenerationModel DSL!>
package <packageName>;
<if(!genModel.imports.empty)>// user defined imports<endif>
<genModel.imports:{imp| import <imp>;<\n>}>
<if(genModel.hasList)>
// imports for List using
import java.util.List;
import java.util.ArrayList;
<endif>

/**
* <genModel.modelName> Model Class with internal Builders for instantiation.
* To create objects use the static entry point method {@link <genModel.modelName>Builder#create<genModel.modelName>}
*
*/
public class <genModel.modelName>{

	<genModel.classes.(genModel.modelName).attributes:{modelAttribute|<createClassAttribute(modelAttribute,"")>}>
	<genModel.classes.(genModel.modelName).optionalAttributes:{modelAttribute|<createClassAttribute(modelAttribute,"")>}>
	<genModel.classes.(genModel.modelName).attributes:{modelAttribute|<createModelGetter(modelAttribute)>}>
	<genModel.classes.(genModel.modelName).optionalAttributes:{modelAttribute|<createModelGetter(modelAttribute)>}>
	<genModel.classes.(genModel.modelName).attributes:{modelAttribute|<createModelSetter(modelAttribute)>}>
	<genModel.classes.(genModel.modelName).optionalAttributes:{modelAttribute|<createModelSetter(modelAttribute)>}>
	
	private <genModel.modelName>(<genModel.modelName>Builder builder){
		<genModel.classes.(genModel.modelName).attributes:{attribute|<transferValues(attribute,"builder")>}>
		<genModel.classes.(genModel.modelName).optionalAttributes:{attribute|<transferOptValues(attribute,"builder")>}>
	}
	
	<rest(genModel.classes.keys):{modelName|<createModelClass(modelName,genModel.classes.(modelName),genModel.modelName)>}>

	<genModel.classes.keys:{className|<createClassBuilder(className, genModel.classes.(className), genModel.classes, genModel)>}>
		
	

}

>>

createModelAttribute(classAttribute) ::= <<
<if(!classAttribute.optional)>
private asd <classAttribute.attributeName>IsSet;<endif>
<if(classAttribute.list)>private List\<<classAttribute.type>\> <classAttribute.attributeName>;<else>
private <classAttribute.type> <classAttribute.attributeName>;<endif>
>>

createModelClass(className, modelClass,modelName) ::= <<
/**
* <className> Model Class which is part of the <modelName> Model.
* For instantiation use the static entry point method {@link <className>Builder#create<className>()}
*
*/
public static class <className>{
	<modelClass.attributes:{attribute|<createClassAttribute(attribute,"")>}>
	<modelClass.optionalAttributes:{attribute|<createClassAttribute(attribute,"")>}>
	
	<! constructor !>
	private <className>(<className;format="cap">Builder builder){
		<modelClass.attributes:{attribute|<transferValues(attribute,"builder")>}>
		<modelClass.optionalAttributes:{attribute|<transferOptValues(attribute,"builder")>}>
	}
	
	<modelClass.attributes:{attribute|<createModelGetter(attribute)>}>
	<modelClass.optionalAttributes:{attribute|<createModelGetter(attribute)>}>
	<modelClass.attributes:{attribute|<createModelSetter(attribute)>}>
	<modelClass.optionalAttributes:{attribute|<createModelSetter(attribute)>}>
}

>>



transferValues(attribute, builderName) ::= <<
<if(attribute.optional)>if(<builderName>.<attribute.attributeName>ValueIsSet)<endif>
this.set<attribute.attributeName;format="cap">(<builderName>.<attribute.attributeName>Value);
>>

transferOptValues(attribute, builderName) ::= <<
if(<builderName>.<attribute.attributeName>ValueIsSet){
	this.<attribute.attributeName>IsSet = true;
	this.set<attribute.attributeName;format="cap">(<builderName>.<attribute.attributeName>Value);
}
>>

createModelGetter(attribute) ::= <<
<if(attribute.list)>public List\<<attribute.type>\> get<attribute.attributeName;format="cap">(){
<else>public <attribute.type> get<attribute.attributeName;format="cap">(){ 
<endif>
	return <attribute.attributeName>;
}
<if(attribute.optional)>public boolean is<attribute.attributeName;format="cap">Set(){ 
	return <attribute.attributeName>IsSet;
}<endif>

>>

createModelSetter(attribute) ::= <<
<if(attribute.list)>public void add<attribute.attributeName;format="cap">(<attribute.type> <attribute.attributeName>){
	this.get<attribute.attributeName;format="cap">().add(<attribute.attributeName>);
}
<endif>public void set<attribute.attributeName;format="cap">(<if(attribute.list)>List\<<attribute.type>\><else><attribute.type><endif> <attribute.attributeName>){
	this.<attribute.attributeName> = <attribute.attributeName>;
}

>>

generateEntryPointMethod(modelClass) ::= <<
/**
* Entrypoint of the <modelClass.className;format="cap">Builder. Use static import in your code for context free DSL using. 
*/
<if(!modelClass.optionalsOnly)>
public static <first(modelClass.attributes).attributeName; format="cap">Scope create<modelClass.className;format="cap">(){
	return new <modelClass.className>Builder().<first(modelClass.attributes).attributeName>Scope;
}
<else>
public static OptionalsOnlyScope create<modelClass.className;format="cap">(){
	return new <modelClass.className>Builder().optionalsOnlyScope;
}
<endif>
>>

createClassBuilder(className,modelClass,allClasses, genModel) ::= <<
/**
* Builder class for <className> instances.
*
*/
public static class <className>Builder{
	<if(!modelClass.attributes.empty)>// mandatory, reference and list attributes<endif>
	<modelClass.attributes:{classAttribute|<createClassAttribute(classAttribute,"Value")>}>
	<if(!modelClass.optionalAttributes.empty)>// simple optional attributes<endif>
	<modelClass.optionalAttributes:{opClassAttribute|<createClassAttribute(opClassAttribute,"Value")>}>
	// scope references
	<! optionalOnly classes dont have build scopes !>
	<if(!modelClass.optionalsOnly)>private final <className;format="cap">BuildScope <className;format="lower">BuildScope; <endif>
	<modelClass.attributes:{classAttribute|<createScopeAttribute(classAttribute)>}>
	<if(modelClass.optionalsOnly)>private final OptionalsOnlyScope optionalsOnlyScope;<endif>
	<! Constructor for ClassBuilder !>
	private <className;format="cap">Builder(){
		<if(modelClass.optionalsOnly)>this.optionalsOnlyScope = new OptionalsOnlyScope();
		<else>// building Scope
		this.<className;format="lower">BuildScope = new <className;format="cap">BuildScope();
		<endif>
		<if(!modelClass.attributes.empty)>// attribute Scopes <endif>
		<modelClass.attributes:{classAttribute|<instantiateScopeAttributes(classAttribute)>}>
	}
	
	<generateEntryPointMethod(modelClass)>
	
	<modelClass.attributes:{classAttribute|<createAttributeScopeClass(modelClass.className,classAttribute,genModel)>}>
	<if(modelClass.optionalsOnly)><optionalsOnlyScopeClass(modelClass)>
	<else><buildScopeClass(modelClass)>
	<endif>
}
>>

buildScopeClass(modelClass) ::= <<
/**
	* Building scope for <modelClass.className>.
	*/
	public class <modelClass.className;format="cap">BuildScope{
		<buildObjectMethod(modelClass)>
	}
>>

buildObjectMethod(modelClass) ::= <<
/**
* Build Method for <modelClass.className> instances.
* @return a new <modelClass.className> instance with attributes filled from this builder class.
*/
public <modelClass.className;format="cap"> build<modelClass.className;format="cap">() {
	<modelClass.className;format="cap"> <modelClass.className;format="lower"> = new <modelClass.className;format="cap">(<modelClass.className;format="cap">Builder.this);
	<modelClass.referencedByOpposite:{nestedAttributeRef|<modelClass.className;format="lower">.<nestedAttributeRef.opposite.attributeName>.set<nestedAttributeRef.attributeName;format="cap">(<modelClass.className;format="lower">);}>
	return <modelClass.className;format="lower">;
}
>>

createClassAttribute(classAttribute, attach) ::= <<
<if(classAttribute.optional)>
private boolean <classAttribute.attributeName><attach>IsSet = false;<endif>
<if(classAttribute.list)>
private List\<<classAttribute.type>\> <classAttribute.attributeName><attach> = new ArrayList\<<classAttribute.type>\>();<else>
private <classAttribute.type> <classAttribute.attributeName><attach>;<endif>
>>

createScopeAttribute(classAttribute) ::= <<
private final <classAttribute.attributeName;format="cap">Scope <classAttribute.attributeName>Scope;

>>

instantiateScopeAttributes(classAttribute) ::= <<
this.<classAttribute.attributeName>Scope = this.new <classAttribute.attributeName;format="cap">Scope();

>>

createAttributeScopeClass(className,classAttribute, genModel) ::= <<
<if(classAttribute.list)><javaDocListScopeClass(classAttribute)>
<elseif(classAttribute.reference)><javaDocRefernceScopeClass(classAttribute)>
<else><javaDocScopeClass(classAttribute)>
<endif>
public class <classAttribute.attributeName;format="cap">Scope{
	<createAttributeMethod(className,classAttribute,genModel.modelName)>
	<! foreach simple optional attribute !>
	<classAttribute.nextOptionalAttributes:{optAttr|<createOptionalAttributeMethod(className, classAttribute.attributeName, optAttr)>}>
}
>>

optionalsOnlyScopeClass(modelClass) ::= <<
<javaDocOptOnlyScopeClass(modelClass)>
public class OptionalsOnlyScope{
	<! foreach simple optional attribute. they must stay in the optioanalsOnly Scope. 
	The build method is not in a seperate Scope so that it can be called anytime since alle attributes are optional!>
	<modelClass.optionalAttributes:{optAttr|<createOptionalAttributeMethod(modelClass.className, "optionalsOnly", optAttr)>}>
	<buildObjectMethod(modelClass)>
}
>>

createAttributeMethod(className,classAttribute,modelName) ::= <<
<if(classAttribute.list)><createListMethod(classAttribute.className,classAttribute,modelName)>
<elseif(classAttribute.ReferencedByAttribute)><createOPPMethod(classAttribute.className,classAttribute,modelName)>
<else><createSimpleMethod(classAttribute.className,classAttribute,modelName)>
<endif>
>>

createSimpleMethod(className,classAttribute,modelName) ::= <<
<! for normal attribute setting methods!>
/**
* Method for setting the <classAttribute.attributeName>Value in this builder so that it can later be transfered to the <className> Model object.
* @return the next scope object
*/
public <getNextScopeClass(className,classAttribute)> <classAttribute.attributeName> (<classAttribute.type> val){
	<className;format="cap">Builder.this.<classAttribute.attributeName>Value = val;
	<if(classAttribute.optional)><className;format="cap">Builder.this.<classAttribute.attributeName>ValueIsSet = true;<endif>
	return <className;format="cap">Builder.this.<getNextScopeAttr(className,classAttribute)>;
}
<if(classAttribute.optional)>
/**
* Method for skipping the optional <classAttribute.attributeName> Attribute
* @return the next scope object 
*/
public <getNextScopeClass(className,classAttribute)> no<classAttribute.attributeName;format="cap"> (){
	return <className;format="cap">Builder.this.<getNextScopeAttr(className,classAttribute)>;
}
<endif>
>>

createOPPMethod(className,classAttribute,modelName) ::= <<
<! for opposite methods !>
/**
* Method for the Opposite Attribute <classAttribute.attributeName>. It will be set by its opposite if it has one.
* @return the next scope object
*/
public <getNextScopeClass(className,classAttribute)> <classAttribute.attributeName> (){
	return <className;format="cap">Builder.this.<getNextScopeAttr(className,classAttribute)>;
}
>>


getNextScopeClass(className,classAttribute) ::= <<
<! retrieves the next Scope Class for the Method header !>
<if(classAttribute.lastAttribute)><className;format="cap">BuildScope<else><classAttribute.nextAttribute.attributeName;format="cap">Scope<endif>
>>

getNextScopeAttr(className,classAttribute) ::= <<
<! retrieves the next Scope Attribute for Method return !>
<if(classAttribute.lastAttribute)><className;format="lower">BuildScope<else><classAttribute.nextAttribute.attributeName>Scope<endif>
>>


createOptionalAttributeMethod(className, scopeName, optionalAttribute) ::= <<
public <scopeName;format="cap">Scope optional<optionalAttribute.attributeName;format="cap">(<optionalAttribute.type> val){
	<className;format="cap">Builder.this.<optionalAttribute.attributeName>Value = val;
	<className;format="cap">Builder.this.<optionalAttribute.attributeName>ValueIsSet = true;
	return <className;format="cap">Builder.this.<scopeName>Scope;
}
>>

createListMethod(className, classAttribute, optionalAttribute) ::= <<
<! for list adding methods !>
/**
* Adds the given <classAttribute.type> object to the <classAttribute.attributeName> List.
* Stays in the same Scope after adding an object so that more objects can be added.
*@param val the <classAttribute.type> object 
*/
public <classAttribute.attributeName;format="cap">Scope add<classAttribute.attributeName;format="cap"> (<classAttribute.type> val){
	<if(!classAttribute.ReferencedByAttribute)><className;format="cap">Builder.this.<classAttribute.attributeName>Value.add(val)<endif>;
	return <className;format="cap">Builder.this.<classAttribute.attributeName>Scope;
}
/**
* Ends the adding of <classAttribute.type> objects to the <classAttribute.attributeName> List.
* By calling this method before adding any objects leaves the <classAttribute.attributeName> List empty.
<if(classAttribute.lastAttribute)>
*@return {@link #<className;format="cap">BuildScope}
*@see {@link #add<classAttribute.attributeName;format="cap">}
*/
public <getNextScopeClass(className,classAttribute)> no<classAttribute.attributeName;format="cap"> (){
	return <className;format="cap">Builder.this.<getNextScopeAttr(className,classAttribute)>;
}
<else>*@return {@link #<className;format="cap">Scope}
*@see {@link #add<classAttribute.attributeName;format="cap">}
*/
public <getNextScopeClass(className,classAttribute)> no<classAttribute.attributeName;format="cap"> (){
	return <className;format="cap">Builder.this.<getNextScopeAttr(className,classAttribute)>;
}<endif>

>>



javaDocListScopeClass(classAttribute)::= <<

/**
* Scope Class for the <classAttribute.type> List attribute <classAttribute.attributeName> {@link <classAttribute.className>Builder#get<classAttribute.attributeName;format="cap">}
<if(classAttribute.reference)>*The type of the list of attributes is defined by the model {@link <classAttribute.type>}<endif>
*/
>>
javaDocRefernceScopeClass(classAttribute)::= <<

/**
* Scope Class for the <classAttribute.type> attribute <classAttribute.attributeName> {@link <classAttribute.className>Builder#get<classAttribute.attributeName;format="cap">}.
* The type of the attribute is defined by the model {@link <classAttribute.type>}
*/
>>
javaDocScopeClass(classAttribute)::= <<

/**
* Scope Class for the <classAttribute.type> attribute <classAttribute.attributeName> {@link <classAttribute.className>Builder#get<classAttribute.attributeName;format="cap">}
*/
>>

javaDocOptOnlyScopeClass(modelClass)::= <<

/**
* Scope Class for setting optional attributes of <modelClass.className>
*/
>>












OLDcreateAttributeMethod(className,classAttribute,modelName) ::= <<
<if(classAttribute.list)><createListMethod(className,classAttribute,modelName)>
<else><if(!classAttribute.lastAttribute)>public <classAttribute.nextAttribute.attributeName;format="cap">Scope <classAttribute.attributeName> (<if(!classAttribute.referencedByAttribute)><classAttribute.type> val<endif>){
<if(!classAttribute.ReferencedByAttribute)><className;format="cap">Builder.this.<classAttribute.attributeName>Value = val;
<if(classAttribute.optional)><className;format="cap">Builder.this.<classAttribute.attributeName>ValueIsSet = true;<endif>
	<endif>
	return <className;format="cap">Builder.this.<classAttribute.nextAttribute.attributeName>Scope;
}
<if(classAttribute.optional)>
public <classAttribute.nextAttribute.attributeName;format="cap">Scope no<classAttribute.attributeName;format="cap"> (){
	return <className;format="cap">Builder.this.<classAttribute.nextAttribute.attributeName>Scope;
}
<endif>
<else>
public <className;format="cap">BuildScope <classAttribute.attributeName> (<if(!classAttribute.ReferencedByAttribute)><classAttribute.type> val<endif>){
	<if(!classAttribute.ReferencedByAttribute)><className;format="cap">Builder.this.<classAttribute.attributeName>Value = val;
	<if(classAttribute.optional)><className;format="cap">Builder.this.<classAttribute.attributeName>ValueIsSet = true;<endif>
	<endif>
	return <className;format="cap">Builder.this.<className;format="lower">BuildScope;
}
<if(classAttribute.optional)>
public <className;format="cap">BuildScope no<classAttribute.attributeName;format="cap"> (){
	return <className;format="cap">Builder.this.<className;format="lower">BuildScope;
}
<endif>
<endif>
<endif>

>>
