BuilderTemplate(packageName, genModel) ::= <<
<! Template for DSLGenerationModel DSL!>
package <packageName>;

<genModel.imports:{imp| import <imp>;<\n>}>

public class <genModel.modelName>{

	<genModel.classes.(genModel.modelName).attributes:{modelAttribute|<createModelAttribute(modelAttribute)>}>
	<genModel.classes.(genModel.modelName).optionalAttributes:{modelAttribute|<if(!modelAttribute.reference)><createModelAttribute(modelAttribute)><endif>}>
	private <genModel.modelName>(<genModel.modelName>Builder builder){
		<genModel.classes.(genModel.modelName).attributes:{attribute|<transferValues(attribute,"builder")>}>
		<genModel.classes.(genModel.modelName).optionalAttributes:{attribute|<if(!attribute.reference)><transferOptValues(attribute,"builder")><endif>}>
	}
	<rest(genModel.classes.keys):{modelName|<createModelClass(modelName,genModel.classes.(modelName),genModel.modelName)>}>

	<genModel.classes.keys:{className|<createClassBuilder(className, genModel.classes.(className), genModel.classes, genModel)>}>
		
	

}

>>

createModelAttribute(classAttribute) ::= <<
private <classAttribute.type> <classAttribute.attributeName>;

>>

createModelClass(className, modelClass,modelName) ::= <<
private static class <className>{
	<modelClass.attributes:{attribute|<createClassAttribute(attribute,"")>}>
	<modelClass.optionalAttributes:{attribute|<createClassAttribute(attribute,"")>}>
	<! constructor !>
	private <className>(<className;format="cap">Builder builder){
		<modelClass.attributes:{attribute|<transferValues(attribute,"builder")>}>
		<modelClass.optionalAttributes:{attribute|<transferOptValues(attribute,"builder")>}>
	}	
	<modelClass.attributes:{attribute|<createModelGetter(attribute)>}>
	<modelClass.attributes:{attribute|<createModelSetter(attribute)>}>
	<modelClass.optionalAttributes:{attribute|<createModelGetter(attribute)>}>
	<modelClass.optionalAttributes:{attribute|<createModelSetter(attribute)>}>
}

>>



transferValues(attribute, builderName) ::= <<
	<if(attribute.optional)>if(<builderName>.<attribute.attributeName>ValueIsSet)
	<endif>
	this.<attribute.attributeName> = <builderName>.<attribute.attributeName>Value;
	
>>

transferOptValues(attribute, builderName) ::= <<
	if(<builderName>.<attribute.attributeName>ValueIsSet)
		this.<attribute.attributeName> = <builderName>.<attribute.attributeName>Value;
>>

createModelGetter(attribute) ::= <<
public <attribute.type> get<attribute.attributeName;format="cap">(){
	return <attribute.attributeName>;
}

>>

createModelSetter(attribute) ::= <<
public void set<attribute.attributeName;format="cap">(<attribute.type> <attribute.attributeName>){
	this.<attribute.attributeName> = <attribute.attributeName>;
}

>>



createRootClassAttribute(className) ::= <<
<className; format="cap"> <className>;

>>

createRootClassBuilderAttribute(className) ::= <<
final <className; format="cap">Builder <className>Builder;

>>

declareNestedBuilder(type) ::= <<
<type;format="cap">Builder <type;format="lower">Builder;
>>

instantiateNestedBuilder(type) ::= <<
this.<type>Builder = new <type>Builder();
>>

generateEntryPointMethod(modelClass) ::= <<
/**
* Entrypoint of the DSL. Use static import in your code for context free DSL using. 
*/
public static <first(modelClass.attributes).attributeName; format="cap">Scope create<modelClass.className;format="cap">(){
	return new <modelClass.className>Builder().<first(modelClass.attributes).attributeName>Scope;
}
>>

createClassBuilder(className,modelClass,allClasses, genModel) ::= <<
public static class <className>Builder{
	//mandatory attributes
	<modelClass.attributes:{classAttribute|<if(!classAttribute.optional)><createClassAttribute(classAttribute,"Value")><endif>}>
	//optional attributes
	<modelClass.optionalAttributes:{opClassAttribute|<createClassOptionalAttribute(opClassAttribute,"Value")>}>
	//scope attributes
	<modelClass.attributes:{classAttribute|<createScopeAttribute(classAttribute)>}>
	private final <className;format="cap">BuildScope <className;format="lower">BuildScope;
	
	<! Constructor for ClassBuilder !>
	private <className;format="cap">Builder(){
		<modelClass.attributes:{classAttribute|<instantiateScopeAttributes(classAttribute)>}>
		this.<className;format="lower">BuildScope = new <className;format="cap">BuildScope();
	}
	
	<generateEntryPointMethod(modelClass)>
	
	<modelClass.attributes:{classAttribute|<createAttributeScopeClass(modelClass.className,classAttribute,genModel)>}>
	
	public class <className;format="cap">BuildScope{
		public <className;format="cap"> build<className;format="cap">() {
			return new <className;format="cap">(<className;format="cap">Builder.this);
		}
	}	

	
}
>>

createClassAttribute(classAttribute, attach) ::= <<
private <classAttribute.type> <classAttribute.attributeName><attach>;

>>

createClassOptionalAttribute(classAttribute, attach) ::= <<
private <classAttribute.type> <classAttribute.attributeName>Value;
private boolean <classAttribute.attributeName>ValueIsSet = false;

>>

createScopeAttribute(classAttribute) ::= <<
private final <classAttribute.attributeName;format="cap">Scope <classAttribute.attributeName>Scope;

>>

createBuilderConstructor(modelClass) ::= <<
private <modelClass.className;format="cap">Builder <classAttribute.attributeName>Scope;
<modelClass.attributes:{classAttribute|<instantiateScopeAttributes(classAttribute)>}>
>>

instantiateScopeAttributes(classAttribute) ::= <<
this.<classAttribute.attributeName>Scope = this.new <classAttribute.attributeName;format="cap">Scope();

>>

createAttributeScopeClass(className,classAttribute, genModel) ::= <<
public class <classAttribute.attributeName;format="cap">Scope{
	<createAttributeMethod(className,classAttribute,genModel.modelName)>
	<! foreach optional attribute !>
	<classAttribute.nextOptionalAttributes:{optAttr|<createOptionalAttributeMethod(className, classAttribute.attributeName, optAttr)>}>
}

>>

createAttributeMethod(className,classAttribute,modelName) ::= <<
<if(!classAttribute.lastAttribute)>
public <classAttribute.nextAttribute.attributeName;format="cap">Scope <classAttribute.attributeName> (<classAttribute.type> val){
	<className;format="cap">Builder.this.<classAttribute.attributeName>Value = val;
	return <className;format="cap">Builder.this.<classAttribute.nextAttribute.attributeName>Scope;
}
<else>
public <className;format="cap">BuildScope <classAttribute.attributeName> (<classAttribute.type> val){
	<className;format="cap">Builder.this.<classAttribute.attributeName>Value = val;
	return <className;format="cap">Builder.this.<className;format="lower">BuildScope;
}
<endif>
>>


createOptionalAttributeMethod(className, scopeName, optionalAttribute) ::= <<
public <scopeName;format="cap">Scope optional<optionalAttribute.attributeName;format="cap">(<optionalAttribute.type> val){
	<className;format="cap">Builder.this.<optionalAttribute.attributeName>Value = val;
	<className;format="cap">Builder.this.<optionalAttribute.attributeName>ValueIsSet = true;
	return <className;format="cap">Builder.this.<scopeName>Scope;
}

>>

createReferenceMethod(referenceAttribute, currentBuilderClass, classes, modelName) ::= <<
public <referenceAttribute.type;format="cap">Builder.<first(classes.(referenceAttribute.type).attributes).attributeName;format="cap">Scope <referenceAttribute.attributeName> (){
	<currentBuilderClass.className;format="cap">Builder.this.<referenceAttribute.type;format="lower">Builder = new <referenceAttribute.type;format="cap">Builder();
	<if(referenceAttribute.optional)><currentBuilderClass.className;format="cap">Builder.this.<referenceAttribute.type;format="lower">ValueIsSet = true; <endif>
	return <currentBuilderClass.className;format="cap">Builder.this.<referenceAttribute.type;format="lower">Builder.<first(classes.(referenceAttribute.type).attributes).attributeName>Scope;
}
<if(referenceAttribute.optional)>
<createOptionalReferenceMethod(referenceAttribute, currentBuilderClass, classes, modelName)>
<endif>
>>

createOptionalReferenceMethod(referenceAttribute, currentBuilderClass, classes, modelName) ::= <<
<if(!referenceAttribute.lastAttribute)>
public <referenceAttribute.nextAttribute.attributeName;format="cap">Scope no<referenceAttribute.attributeName;format="cap"> (<referenceAttribute.type> val){
	return <currentBuilderClass.className;format="cap">Builder.this.<referenceAttribute.nextAttribute.attributeName>Scope;
}
<else>
public <modelName;format="cap">Builder.Build<modelName;format="cap">Scope no<referenceAttribute.attributeName;format="cap"> (){
	return <modelName;format="cap">Builder.this.build<modelName;format="cap">Scope;
}
<endif>

>>

SAVEcreateOptionalAttributeMethod(modelName,scopeName, optionalAttribute) ::= <<
public <scopeName;format="cap">Scope optional<optionalAttribute.attributeName;format="cap">(<optionalAttribute.type> val){
	<modelName;format="cap">Builder.this.<optionalAttribute.attributeName>Value = val;
	<modelName;format="cap">Builder.this.<optionalAttribute.attributeName>ValueIsSet = true;
	return <modelName;format="cap">Builder.this.<scopeName>Scope;
}
>>

SAVEcreateAttributeScopeClass(className,classAttribute, modelName) ::= <<
public class <classAttribute.attributeName;format="cap">Scope{
	<if(classAttribute.nextClass.empty)><createAttributeMethod(className,classAttribute)> <! normal attribute with nextAttribute !>
	<else><createAttributeMethod(classAttribute.nextClass.className,first(classAttribute.nextClass.attributes))> <! attribute with a class as next Attribute !>
	<endif>
	<! foreach optional attribute !>
	<classAttribute.nextOptionalAttributes:{optAttr|<createOptionalAttributeMethod(className, classAttribute.attributeName, optAttr)>}>
}

>>

SAVEgenerateEntryPointMethod(firstClass,genModel) ::= <<
public static <genModel.classes.(firstClass).className;format="cap">Builder.<first(genModel.classes.(firstClass).attributes).attributeName; format="cap">Scope <genModel.classes.(firstClass).className>(){
	<genModel.modelName; format="cap">Builder builder = new <genModel.modelName; format="cap">Builder();
	return builder.<genModel.classes.(firstClass).className>Builder.<first(genModel.classes.(firstClass).attributes).attributeName>Scope;
}
>>
