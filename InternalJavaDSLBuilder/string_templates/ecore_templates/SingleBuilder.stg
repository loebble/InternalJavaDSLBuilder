import "ecoreBase.stg"

/**
* This template creates a DSL for a ecore model
* from a DSLGeneration Model which was generated from this ECore model.
* The template creates one single builder.
*/
SingleBuilder(packageName,genModel) ::= <<
<! Template for a Single Builder of a EMF Model!>
package <packageName>;
<if(!genModel.imports.empty)>// imports of emf model types<endif>
<genModel.imports:{imp| import <imp>;<\n>}>
<if(genModel.hasList)>
// imports for List using
import java.util.List;
import java.util.ArrayList;
<endif>

/**
* Builder root class for <genModel.modelName> instances.
*
*/
public final class <genModel.modelName>Builder{
    <if(!first(genModel.classes).attributesToSet.empty)>// mandatory, reference and list attributes<endif>
    <first(genModel.classes).attributesToSet:{classAttribute|<createClassAttribute(classAttribute,"Value")>}>
    <if(!first(genModel.classes).simpleOptAttr.empty)>// simple optional attributes<endif>
    <first(genModel.classes).simpleOptAttr:{opClassAttribute|<createClassAttribute(opClassAttribute,"Value")>}>
    // scope references
    <! simpleOptionalsOnly classes dont have build scopes !>
    <if(!first(genModel.classes).simpleOptionalsOnly)><javaDocBuildScopeClass(first(genModel.classes))>
private final <genModel.modelName;format="cap">BuildScope <genModel.modelName;format="lower">BuildScope; 
    <endif>
    <first(genModel.classes).attributesToSet:{classAttribute|<if(!classAttribute.opposite)><createScopeAttribute(classAttribute)
       ><elseif((classAttribute.opposite)&&(classAttribute.creatorOfOpposite))><createScopeAttribute(classAttribute)><endif>}>
    <if(first(genModel.classes).simpleOptionalsOnly)>private final SimpleOptionalsOnlyScope simpleOptionalsOnlyScope;<endif>
    <! Constructor for ClassBuilder !>
    private <genModel.modelName;format="cap">Builder(){
        <if(first(genModel.classes).simpleOptionalsOnly)>this.simpleOptionalsOnlyScope = new SimpleOptionalsOnlyScope();
        <else>// building Scope
this.<genModel.modelName;format="lower">BuildScope = new <genModel.modelName;format="cap">BuildScope();
        <endif>
        <if(!first(genModel.classes).attributesToSet.empty)>// attribute Scopes <endif>
        <first(genModel.classes).attributesToSet:{classAttribute|<instantiateScopeAttributes(classAttribute)>}>
    }
    
    <generateAllEntryPoints(genModel)>
    <first(genModel.classes).attributesToSet:{classAttribute|<if(!classAttribute.opposite)><createAttributeScopeClass(classAttribute.className,classAttribute)
       ><elseif((classAttribute.opposite)&&(classAttribute.creatorOfOpposite))><createAttributeScopeClass(classAttribute.className,classAttribute)><endif>}>
    <if(first(genModel.classes).simpleOptionalsOnly)><simpleOptionalsOnlyScopeClass(first(genModel.classes))>
    <else><emfBuildScopeClass(first(genModel.classes))>
    <endif>
    
    <rest(genModel.classes):{modelClass|<createBuilderClass(modelClass)>}>
}

>>


/**
* Creates builder for a ModelClass.
*/
createBuilderClass(modelClass) ::= <<

/**
* Inner builder class for <modelClass.className> instances.
*
*/
public static class <modelClass.className>Builder{
    <if(!modelClass.attributesToSet.empty)>// mandatory, reference and list attributes<endif>
    <modelClass.attributesToSet:{classAttribute|<createClassAttribute(classAttribute,"Value")>}>
    <if(!modelClass.simpleOptAttr.empty)>// simple optional attributes<endif>
    <modelClass.simpleOptAttr:{opClassAttribute|<createClassAttribute(opClassAttribute,"Value")>}>
    // scope references
    <! simpleOptionalsOnly classes dont have build scopes !>
    <if(!modelClass.simpleOptionalsOnly)>private final <modelClass.className;format="cap">BuildScope <modelClass.className;format="lower">BuildScope; <endif>
    <modelClass.attributesToSet:{classAttribute|<createScopeAttribute(classAttribute)>}>
    <if(modelClass.simpleOptionalsOnly)>private final SimpleOptionalsOnlyScope simpleOptionalsOnlyScope;<endif>
    <! Constructor for ClassBuilder !>
    <javaDocBuilderConstructor(modelClass)>
    private <modelClass.className;format="cap">Builder(){
        <if(modelClass.simpleOptionalsOnly)>this.simpleOptionalsOnlyScope = new SimpleOptionalsOnlyScope();
        <else>// building Scope
this.<modelClass.className;format="lower">BuildScope = new <modelClass.className;format="cap">BuildScope();
        <endif>
        <if(!modelClass.attributesToSet.empty)>// attribute Scopes <endif>
        <modelClass.attributesToSet:{classAttribute|<if(!classAttribute.opposite)><instantiateScopeAttributes(classAttribute)
          ><elseif((classAttribute.opposite)&&(classAttribute.creatorOfOpposite))><instantiateScopeAttributes(classAttribute)><endif>}>
        <modelClass.attributesToSet:{classAttribute|}>
    }
    
    <! only create ScopeClass and attribute method if it isnt a opposite attribute !>
    <modelClass.attributesToSet:{classAttribute|<createAttributeScopeClass(modelClass.className,classAttribute)>}>
    <if(modelClass.simpleOptionalsOnly)><simpleOptionalsOnlyScopeClass(modelClass)>
    <else><emfBuildScopeClass(modelClass)>
    <endif>
}
>>

/**
* method for creating all entry points in the root builder.
*/
generateAllEntryPoints(genModel) ::= <<
<first(genModel.classes):{modelClass|<generateEntryPointMethodInRootBuilder(modelClass)>}>
<rest(genModel.classes):{modelClass|<generateEntryPointMethodInRootBuilder(modelClass)>}>
>>



/**
* Creates a single entrypoint method in the root builder.
*/
generateEntryPointMethodInRootBuilder(modelClass) ::= <<
/**
* Entrypoint of the <modelClass.className;format="cap">Builder. 
* Use static import in your code for context free DSL using.
* @return the first scope object 
*/
<if(!modelClass.simpleOptionalsOnly)>
public static <modelClass.className;format="cap">Builder.<first(modelClass.attributesToSet).attributeName; format="cap">Scope create<modelClass.className;format="cap">(){
    return new <modelClass.className>Builder().<first(modelClass.attributesToSet).attributeName>Scope;
}
<else>
public static <modelClass.className;format="cap">Builder.SimpleOptionalsOnlyScope create<modelClass.className;format="cap">(){
    return new <modelClass.className>Builder().simpleOptionalsOnlyScope;
}
<endif>
>>

