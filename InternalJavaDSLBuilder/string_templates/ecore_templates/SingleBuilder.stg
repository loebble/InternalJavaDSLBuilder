SingleBuilder(packageName,genModel) ::= <<
<! Template for a Single Builder of a EMF Model!>
package <packageName>;
<if(!genModel.imports.empty)>// imports of emf model types<endif>
<genModel.imports:{imp| import <imp>;<\n>}>
<if(genModel.hasList)>
// imports for List using
import java.util.List;
import java.util.ArrayList;
<endif>

/**
* Builder root class for <genModel.modelName> instances.
*
*/
public final class <genModel.modelName>Builder{
	<if(!first(genModel.classes).attributesToSet.empty)>// mandatory, reference and list attributes<endif>
	<first(genModel.classes).attributesToSet:{classAttribute|<createClassAttribute(classAttribute,"Value")>}>
	<if(!first(genModel.classes).simpleOptAttr.empty)>// simple optional attributes<endif>
	<first(genModel.classes).simpleOptAttr:{opClassAttribute|<createClassAttribute(opClassAttribute,"Value")>}>
	// scope references
	<! simpleOptionalsOnly classes dont have build scopes !>
	<if(!first(genModel.classes).simpleOptionalsOnly)>private final <genModel.modelName;format="cap">BuildScope <genModel.modelName;format="lower">BuildScope; <endif>
	<first(genModel.classes).attributesToSet:{classAttribute|<if(!classAttribute.opposite)><createScopeAttribute(classAttribute)
	   ><elseif((classAttribute.opposite)&&(classAttribute.creatorOfOpposite))><createScopeAttribute(classAttribute)><endif>}>
	<if(first(genModel.classes).simpleOptionalsOnly)>private final SimpleOptionalsOnlyScope simpleOptionalsOnlyScope;<endif>
	<! Constructor for ClassBuilder !>
	private <genModel.modelName;format="cap">Builder(){
		<if(first(genModel.classes).simpleOptionalsOnly)>this.simpleOptionalsOnlyScope = new SimpleOptionalsOnlyScope();
		<else>// building Scope
this.<genModel.modelName;format="lower">BuildScope = new <genModel.modelName;format="cap">BuildScope();
		<endif>
		<if(!first(genModel.classes).attributesToSet.empty)>// attribute Scopes <endif>
		<first(genModel.classes).attributesToSet:{classAttribute|<instantiateScopeAttributes(classAttribute)>}>
	}
	
	<generateAllEntryPoints(genModel)>
	<first(genModel.classes).attributesToSet:{classAttribute|<if(!classAttribute.opposite)><createAttributeScopeClass(classAttribute.className,classAttribute)
       ><elseif((classAttribute.opposite)&&(classAttribute.creatorOfOpposite))><createAttributeScopeClass(classAttribute.className,classAttribute)><endif>}>
	<if(first(genModel.classes).simpleOptionalsOnly)><simpleOptionalsOnlyScopeClass(first(genModel.classes))>
	<else><emfBuildScopeClass(first(genModel.classes))>
	<endif>
	
	<rest(genModel.classes):{modelClass|<createBuilderClass(modelClass)>}>
}

>>

createBuilderClass(modelClass) ::= <<

/**
* Builder class for <modelClass.className> instances.
*
*/
public static class <modelClass.className>Builder{
	<if(!modelClass.attributesToSet.empty)>// mandatory, reference and list attributes<endif>
	<modelClass.attributesToSet:{classAttribute|<createClassAttribute(classAttribute,"Value")>}>
	<if(!modelClass.simpleOptAttr.empty)>// simple optional attributes<endif>
	<modelClass.simpleOptAttr:{opClassAttribute|<createClassAttribute(opClassAttribute,"Value")>}>
	// scope references
	<! simpleOptionalsOnly classes dont have build scopes !>
	<if(!modelClass.simpleOptionalsOnly)>private final <modelClass.className;format="cap">BuildScope <modelClass.className;format="lower">BuildScope; <endif>
	<modelClass.attributesToSet:{classAttribute|<if(!classAttribute.opposite)><createScopeAttribute(classAttribute)
	   ><elseif((classAttribute.opposite)&&(classAttribute.creatorOfOpposite))><createScopeAttribute(classAttribute)><endif>}>
	<if(modelClass.simpleOptionalsOnly)>private final SimpleOptionalsOnlyScope simpleOptionalsOnlyScope;<endif>
	<! Constructor for ClassBuilder !>
	private <modelClass.className;format="cap">Builder(){
		<if(modelClass.simpleOptionalsOnly)>this.simpleOptionalsOnlyScope = new SimpleOptionalsOnlyScope();
		<else>// building Scope
this.<modelClass.className;format="lower">BuildScope = new <modelClass.className;format="cap">BuildScope();
		<endif>
		<if(!modelClass.attributesToSet.empty)>// attribute Scopes <endif>
		<modelClass.attributesToSet:{classAttribute|<if(!classAttribute.opposite)><instantiateScopeAttributes(classAttribute)
		  ><elseif((classAttribute.opposite)&&(classAttribute.creatorOfOpposite))><instantiateScopeAttributes(classAttribute)><endif>}>
		<modelClass.attributesToSet:{classAttribute|}>
	}
	
	<! only create ScopeClass and attribute method if it isnt a opposite attribute !>
	<modelClass.attributesToSet:{classAttribute|<createAttributeScopeClass(modelClass.className,classAttribute)>}>
	<if(modelClass.simpleOptionalsOnly)><simpleOptionalsOnlyScopeClass(modelClass)>
	<else><emfBuildScopeClass(modelClass)>
	<endif>
}
>>

generateEMFCreateModelInstance(modelClass) ::= <<
/**
* Creates an instance of the corresponding EObject by using
* the package factory {@link <modelClass.model.factoryName>} 
* and fills it with the parameter of the <modelClass.className>Builder
* @param builder the builder created by the {@link #build<modelClass.className>} method
* @return a new <modelClass.className> instance
*
*/
private <modelClass.className> create<modelClass.className>Instance(final <modelClass.className>Builder builder){
		<modelClass.model.factoryName> factory = <modelClass.model.factoryName>.eINSTANCE;
		<modelClass.className> instance = factory.create<modelClass.className>();
		<modelClass.attributesToSet:{attribute|<if(!attribute.list)><transferValuesToEClass(attribute,"builder","instance")><else
		><transferListValuesToEClass(attribute,"builder","instance")><endif>}>
		<modelClass.simpleOptAttr:{attribute|<transferOptValuesToEClass(attribute,"builder","instance")>}>
		return instance;
	}

>>

transferValuesToEClass(attribute, builderName, eClassName) ::= <<
<if((attribute.opposite) && (!attribute.creatorOfOpposite))><else>
<if(attribute.optional)>if(<builderName>.<attribute.attributeName>ValueIsSet)
	<endif><eClassName>.set<attribute.attributeName;format="cap">(<builderName>.<attribute.attributeName>Value);<endif>
>>

transferListValuesToEClass(attribute, builderName, eClassName) ::= <<
<if((attribute.opposite) && (!attribute.creatorOfOpposite))><else>
<eClassName>.get<attribute.attributeName;format="cap">().addAll(<builderName>.<attribute.attributeName>Value);<endif>
>>

transferOptValuesToEClass(attribute, builderName, eClassName) ::= <<
if(<builderName>.<attribute.attributeName>ValueIsSet){
	<eClassName>.set<attribute.attributeName;format="cap">(<builderName>.<attribute.attributeName>Value);
}
>>

generateAllEntryPoints(genModel) ::= <<
<first(genModel.classes):{modelClass|<generateEntryPointMethodInRootBuilder(modelClass)>}>
<rest(genModel.classes):{modelClass|<generateEntryPointMethodInRootBuilder(modelClass)>}>
>>

generateEntryPointMethodInRootBuilder(modelClass) ::= <<
/**
* Entrypoint of the <modelClass.className;format="cap">Builder. Use static import in your code for context free DSL using. 
*/
<if(!modelClass.simpleOptionalsOnly)>
<if(((first(modelClass.attributesToSet).list) && (!first(modelClass.attributesToSet).optional))
&& !((first(modelClass.attributesToSet).opposite) && (!first(modelClass.attributesToSet).creatorOfOpposite)))>
public static <modelClass.className;format="cap">Builder.<first(modelClass.attributesToSet).attributeName; format="cap">MustAddScope create<modelClass.className;format="cap">(){
	return new <modelClass.className>Builder().<first(modelClass.attributesToSet).attributeName>MustAddScope;
}<else>
public static <modelClass.className;format="cap">Builder.<first(modelClass.attributesToSet).attributeName; format="cap">Scope create<modelClass.className;format="cap">(){
	return new <modelClass.className>Builder().<first(modelClass.attributesToSet).attributeName>Scope;
}<endif>
<else>
public static <modelClass.className;format="cap">Builder.SimpleOptionalsOnlyScope create<modelClass.className;format="cap">(){
	return new <modelClass.className>Builder().simpleOptionalsOnlyScope;
}
<endif>
>>

generateEntryPointMethod(modelClass) ::= <<
/**
* Entrypoint of the <modelClass.className;format="cap">Builder. Use static import in your code for context free DSL using. 
*/
<if(!modelClass.simpleOptionalsOnly)>
public static <first(modelClass.attributesToSet).attributeName; format="cap">Scope create<modelClass.className;format="cap">(){
	return new <modelClass.className>Builder().<first(modelClass.attributesToSet).attributeName>Scope;
}
<else>
public static SimpleOptionalsOnlyScope create<modelClass.className;format="cap">(){
	return new <modelClass.className>Builder().simpleOptionalsOnlyScope;
}
<endif>
>>


emfBuildScopeClass(modelClass) ::= <<
/**
* Building scope class for <modelClass.className>.
*/
public class <modelClass.className;format="cap">BuildScope{
	<buildEMFObjectMethod(modelClass)>
	<generateEMFCreateModelInstance(modelClass)>
}
>>

buildEMFObjectMethod(modelClass) ::= <<
/**
* Build Method for <modelClass.className> instances.
* Calls the corresponding EMF factory {@link <modelClass.model.factoryName>} to create a <modelClass.className> instance.
* @return a new <modelClass.className> instance with attributes filled from this builder class.
*/
public <modelClass.className;format="cap"> build<modelClass.className;format="cap">() {
	<modelClass.className>Builder builder = <modelClass.className>Builder.this;
	return create<modelClass.className>Instance(builder);
}
>>

createClassAttribute(classAttribute, attach) ::= <<
<if((classAttribute.opposite) && (!classAttribute.creatorOfOpposite))><else>
<if(classAttribute.optional)>
private boolean <classAttribute.attributeName><attach>IsSet = false;<endif>
<if(classAttribute.list)>
private List\<<classAttribute.type>\> <classAttribute.attributeName><attach> = new ArrayList\<<classAttribute.type>\>();<else>
private <classAttribute.type> <classAttribute.attributeName><attach>;<endif>
<endif>
>>

createScopeAttribute(classAttribute) ::= <<
<if((classAttribute.list) &&
(!classAttribute.optional))><if((classAttribute.opposite) && (!classAttribute.creatorOfOpposite))>
<else>private final <classAttribute.attributeName;format="cap">MustAddScope <classAttribute.attributeName>MustAddScope;<endif><endif>
private final <classAttribute.attributeName;format="cap">Scope <classAttribute.attributeName>Scope;

>>

instantiateScopeAttributes(classAttribute) ::= <<
<if((classAttribute.list) &&
(!classAttribute.optional))><if((classAttribute.opposite) && (!classAttribute.creatorOfOpposite))>
<else>this.<classAttribute.attributeName>MustAddScope = this.new <classAttribute.attributeName;format="cap">MustAddScope();<endif><endif>
this.<classAttribute.attributeName>Scope = this.new <classAttribute.attributeName;format="cap">Scope();

>>

createAttributeScopeClass(className,classAttribute) ::= <<
<! Special case if List has to have at least one Element !>
<if((classAttribute.list) && (!classAttribute.optional))>
<createMustAddScope(className,classAttribute)><endif>
<if(classAttribute.list)><javaDocListScopeClass(classAttribute)>
<elseif(classAttribute.reference)><javaDocRefernceScopeClass(classAttribute)>
<else><javaDocScopeClass(classAttribute)>
<endif>
public class <classAttribute.attributeName;format="cap">Scope{
	<createAttributeMethod(className,classAttribute)>
	<! foreach simple optional attribute !>
	<classAttribute.nextSimpleOptAttr:{optAttr|<createOptionalAttributeMethod(className, classAttribute.attributeName, optAttr)>}>
}
>>

createMustAddScope(className,classAttribute) ::= <<
/**
* ScopeClass forcing the user to add at least one <classAttribute.type> value
* to the <classAttribute.attributeName>Value list.
*/
public class <classAttribute.attributeName;format="cap">MustAddScope{
	/**
	* Adds the first required <classAttribute.type> object to the <classAttribute.attributeName> List.
	*@param val the <classAttribute.type> object 
	*/
	public <classAttribute.attributeName;format="cap">Scope add<classAttribute.attributeName;format="cap"> (<classAttribute.type> val){
		<className;format="cap">Builder.this.<classAttribute.attributeName>Value.add(val);
		return <className;format="cap">Builder.this.<classAttribute.attributeName>Scope;
	}
}
>>

simpleOptionalsOnlyScopeClass(modelClass) ::= <<
<javaDocOptOnlyScopeClass(modelClass)>
public class SimpleOptionalsOnlyScope{
	<! foreach simple optional attribute. they must stay in the optioanalsOnly Scope. 
	The build method is not in a seperate Scope so that it can be called anytime since alle attributes are optional!>
	<modelClass.simpleOptAttr:{optAttr|<createOptionalAttributeMethod(modelClass.className, "simpleOptionalsOnly", optAttr)>}>
	<buildEMFObjectMethod(modelClass)>
	<generateEMFCreateModelInstance(modelClass)>
}
>>

createAttributeMethod(className,classAttribute) ::= <<
<if(classAttribute.list)><createListMethod(classAttribute.className,classAttribute)>
<else><createSimpleMethod(classAttribute.className,classAttribute)>
<endif>
>>

createSimpleMethod(className, classAttribute) ::= <<
<if((classAttribute.opposite) && (!classAttribute.creatorOfOpposite))><else>
<! for normal attribute setting methods!>
/**
* Method for setting the <classAttribute.attributeName>Value in this builder.
* @return the next scope object
*/
public <getNextScopeClass(className,classAttribute)> <classAttribute.attributeName> (<classAttribute.type> val){
	<className;format="cap">Builder.this.<classAttribute.attributeName>Value = val;
	<if(classAttribute.optional)><className;format="cap">Builder.this.<classAttribute.attributeName>ValueIsSet = true;<endif>
	return <className;format="cap">Builder.this.<getNextScopeAttr(className,classAttribute)>;
}
<if(classAttribute.optional)>
/**
* Method for skipping the optional <classAttribute.attributeName> Attribute
* @return the next scope object 
*/
public <getNextScopeClass(className,classAttribute)> no<classAttribute.attributeName;format="cap"> (){
	return <className;format="cap">Builder.this.<getNextScopeAttr(className,classAttribute)>;
}<endif><endif>
>>

getNextScopeClass(className,classAttribute) ::= <<
<if((classAttribute.nextAttribute.list) &&(!classAttribute.nextAttribute.optional))
><classAttribute.nextAttribute.attributeName;format="cap">MustAddScope<else
    ><if(classAttribute.lastAttribute)><className;format="cap">BuildScope<else
        ><classAttribute.nextAttribute.attributeName;format="cap">Scope<
    endif
><endif>
>>

getNextScopeAttr(className,classAttribute) ::= <<
<! retrieves the next Scope Attribute for Method return !>
<if((classAttribute.nextAttribute.list) &&(!classAttribute.nextAttribute.optional))><classAttribute.nextAttribute.attributeName>MustAddScope<else
><if(classAttribute.lastAttribute)><className;format="lower">BuildScope<else><classAttribute.nextAttribute.attributeName>Scope<endif><endif>
>>


createOptionalAttributeMethod(className, scopeName, optionalAttribute) ::= <<
/**
* Setter method for the optional attribute <optionalAttribute.attributeName>
*/
public <scopeName;format="cap">Scope opt<optionalAttribute.attributeName;format="cap">(<optionalAttribute.type> val){
	<className;format="cap">Builder.this.<optionalAttribute.attributeName>Value = val;
	<className;format="cap">Builder.this.<optionalAttribute.attributeName>ValueIsSet = true;
	return <className;format="cap">Builder.this.<scopeName>Scope;
}
>>

createListMethod(className, classAttribute) ::= <<
<! for list adding methods !>
/**
* Adds the given <classAttribute.type> object to the <classAttribute.attributeName> List.
* Stays in the same Scope after adding an object so that more objects can be added.
*@param val the <classAttribute.type> object 
*/
public <classAttribute.attributeName;format="cap">Scope add<classAttribute.attributeName;format="cap"> (<classAttribute.type> val){
	<className;format="cap">Builder.this.<classAttribute.attributeName>Value.add(val);
	return <className;format="cap">Builder.this.<classAttribute.attributeName>Scope;
}
/**
* Ends the adding of <classAttribute.type> objects to the <classAttribute.attributeName> List.
* By calling this method before adding any objects leaves the <classAttribute.attributeName> List empty.
<if(classAttribute.lastAttribute)>
*@return {@link #<className;format="cap">BuildScope}
*@see {@link #add<classAttribute.attributeName;format="cap">}
*/
public <getNextScopeClass(className,classAttribute)> no<classAttribute.attributeName;format="cap"> (){
	return <className;format="cap">Builder.this.<getNextScopeAttr(className,classAttribute)>;
}
<else>*@return {@link #<className;format="cap">Scope}
*@see {@link #add<classAttribute.attributeName;format="cap">}
*/
public <getNextScopeClass(className,classAttribute)> no<classAttribute.attributeName;format="cap"> (){
	return <className;format="cap">Builder.this.<getNextScopeAttr(className,classAttribute)>;
}<endif>

>>



javaDocListScopeClass(classAttribute)::= <<

/**
* Scope Class for the <classAttribute.type> List attribute <classAttribute.attributeName> {@link <classAttribute.className>Builder#get<classAttribute.attributeName;format="cap">}
<if(classAttribute.reference)>*The type of the list of attributes is defined by the model {@link <classAttribute.type>}<endif>
*/
>>
javaDocRefernceScopeClass(classAttribute)::= <<

/**
* Scope Class for the <classAttribute.type> attribute <classAttribute.attributeName> {@link <classAttribute.className>Builder#get<classAttribute.attributeName;format="cap">}.
* The type of the attribute is defined by the model {@link <classAttribute.type>}
*/
>>
javaDocScopeClass(classAttribute)::= <<

/**
* Scope Class for the <classAttribute.type> attribute <classAttribute.attributeName> {@link <classAttribute.className>Builder#get<classAttribute.attributeName;format="cap">}
*/
>>

javaDocOptOnlyScopeClass(modelClass)::= <<

/**
* Scope Class for setting optional attributes of <modelClass.className>
*/
>>
