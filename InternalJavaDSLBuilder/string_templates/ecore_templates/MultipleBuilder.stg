import "ecoreBase.stg"
/**
* This template creates a DSL for a ecore model
* from a DSLGeneration Model which was generated from this ECore model.
* The template creates one an own builder for each EClass, that was defined in
* the DSLGenerationModel.
*/
ClassBuilder(packageName,modelClass) ::= <<
<! Template for a Builder of a ModelClass !>
package <packageName>;
<if(!modelClass.imports.empty)>// imports of emf model types<endif>
<modelClass.imports:{imp| import <imp>;<\n>}>
<if(modelClass.hasList)>
// imports for List using
import java.util.List;
import java.util.ArrayList;
<endif>
/**
* Builder class for <modelClass.className> instances.
*
*/
public final class <modelClass.className>Builder {
    <if(!modelClass.attributesToSet.empty)>// mandatory, reference and list attributes<endif>
    <modelClass.attributesToSet:{classAttribute|<createClassAttribute(classAttribute,"Value")>}>
    <if(!modelClass.simpleOptAttr.empty)>// simple optional attributes<endif>
    <modelClass.simpleOptAttr:{opClassAttribute|<createClassAttribute(opClassAttribute,"Value")>}>
    // scope references
    <! simpleOptionalsOnly classes dont have build scopes !>
    <if(!modelClass.simpleOptionalsOnly)
        ><javaDocBuildScopeClass(modelClass)>
private final <modelClass.className;format="cap">BuildScope <modelClass.className;format="lower">BuildScope; 
    <endif>
    <modelClass.attributesToSet:{classAttribute|<createScopeAttribute(classAttribute)>}>
    <if(modelClass.simpleOptionalsOnly)
        >private final SimpleOptionalsOnlyScope simpleOptionalsOnlyScope;<endif>
    <! Constructor for ClassBuilder !>
    <javaDocBuilderConstructor(modelClass)>
    private <modelClass.className;format="cap">Builder() {
        <if(modelClass.simpleOptionalsOnly)>this.simpleOptionalsOnlyScope = new SimpleOptionalsOnlyScope();
        <else>// building Scope
this.<modelClass.className;format="lower">BuildScope = new <modelClass.className;format="cap">BuildScope();
        <endif>
        <if(!modelClass.attributesToSet.empty)>// attribute Scopes <endif>
        <modelClass.attributesToSet:{classAttribute|<instantiateScopeAttributes(classAttribute)>}>
    }
    
    <generateEntryPointMethod(modelClass)>
    <modelClass.attributesToSet:{classAttribute|<createAttributeScopeClass(modelClass.className,classAttribute)>}>
    <if(modelClass.simpleOptionalsOnly)><simpleOptionalsOnlyScopeClass(modelClass)>
    <else><emfBuildScopeClass(modelClass)>
    <endif>
}

>>

/**
* Creates the entry point method for the builder.
*/
generateEntryPointMethod(modelClass) ::= <<
/**
* Entrypoint of the <modelClass.className;format="cap">Builder. 
* Use static import in your code for context free DSL using. 
* @return the first scope object 
*/
<if(!modelClass.simpleOptionalsOnly)>
public static <first(modelClass.attributesToSet).attributeName; format="cap">Scope create<modelClass.className;format="cap">() {
    return new <modelClass.className>Builder().<first(modelClass.attributesToSet).attributeName>Scope;
}
<else>
public static SimpleOptionalsOnlyScope create<modelClass.className;format="cap">() {
    return new <modelClass.className>Builder().simpleOptionalsOnlyScope;
}
<endif>
>>
