ClassBuilder(packageName,modelClass) ::= <<
<! Template for a Builder of a ModelClass !>
package <packageName>;
<if(!modelClass.imports.empty)>// imports of emf model types<endif>
<modelClass.imports:{imp| import <imp>;<\n>}>
<if(modelClass.hasList)>
// imports for List using
import java.util.List;
import java.util.ArrayList;
<endif>
/**
* Builder class for <modelClass.className> instances.
*
*/
public final class <modelClass.className>Builder {
    <if(!modelClass.attributes.empty)>// mandatory, reference and list attributes<endif>
    <modelClass.attributes:{classAttribute|<createClassAttribute(classAttribute,"Value")>}>
    <if(!modelClass.simpleOptAttr.empty)>// simple optional attributes<endif>
    <modelClass.simpleOptAttr:{opClassAttribute|<createClassAttribute(opClassAttribute,"Value")>}>
    // scope references
    <! simpleOptionalsOnly classes dont have build scopes !>
    <if(!modelClass.simpleOptionalsOnly)>private final <modelClass.className;format="cap">BuildScope <modelClass.className;format="lower">BuildScope; <endif>
    <modelClass.attributes:{classAttribute|<createScopeAttribute(classAttribute)>}>
    <if(modelClass.simpleOptionalsOnly)>private final SimpleOptionalsOnlyScope simpleOptionalsOnlyScope;<endif>
    <! Constructor for ClassBuilder !>
    private <modelClass.className;format="cap">Builder() {
        <if(modelClass.simpleOptionalsOnly)>this.simpleOptionalsOnlyScope = new SimpleOptionalsOnlyScope();
        <else>// building Scope
    this.<modelClass.className;format="lower">BuildScope = new <modelClass.className;format="cap">BuildScope();
        <endif>
        <if(!modelClass.attributes.empty)>// attribute Scopes <endif>
        <modelClass.attributes:{classAttribute|<instantiateScopeAttributes(classAttribute)>}>
    }
    
    <generateEMFCreateModelInstance(modelClass)>
    
    <generateEntryPointMethod(modelClass)>
    <modelClass.attributes:{classAttribute|<createAttributeScopeClass(modelClass.className,classAttribute)>}>
    <if(modelClass.simpleOptionalsOnly)><simpleOptionalsOnlyScopeClass(modelClass)>
    <else><emfBuildScopeClass(modelClass)>
    <endif>
}

>>

createModelGetter(attribute) ::= <<
<if(attribute.list)>public List\<<attribute.type>\> get<attribute.attributeName;format="cap">() {
<else>public <attribute.type> get<attribute.attributeName;format="cap">() { 
<endif>
    return <attribute.attributeName>;
}
<if(attribute.optional)>public boolean is<attribute.attributeName;format="cap">Set() { 
    return <attribute.attributeName>IsSet;
}<endif>

>>

createModelSetter(attribute) ::= <<
<if(attribute.list)>public void add<attribute.attributeName;format="cap">(<attribute.type> <attribute.attributeName>) {
    this.get<attribute.attributeName;format="cap">().add(<attribute.attributeName>);
}
<endif>public void set<attribute.attributeName;format="cap">(<if(attribute.list)>List\<<attribute.type>\><else><attribute.type><endif> <attribute.attributeName>) {
    this.<attribute.attributeName> = <attribute.attributeName>;
}

>>

generateEMFCreateModelInstance(modelClass) ::= <<
/**
* Creates an instance of the corresponding EObject by using 
* the package factory {@link <modelClass.model.factoryName>} 
* and fills it with the parameter of the <modelClass.className>Builder.
* @param builder the builder created by the {@link #build<modelClass.className>} method
* @return a new <modelClass.className> instance
*
*/
private static <modelClass.className> create<modelClass.className>Instance(final <modelClass.className>Builder builder) {
    <modelClass.model.factoryName> factory = <modelClass.model.factoryName>.eINSTANCE;
    <modelClass.className> instance = factory.create<modelClass.className>();
    <modelClass.attributes:{attribute|<if(!attribute.list)><transferValuesToEClass(attribute,"builder","instance")>
    <else><transferListValuesToEClass(attribute,"builder","instance")>
    <endif>}>
    <modelClass.simpleOptAttr:{attribute|<transferOptValuesToEClass(attribute,"builder","instance")>}>
    return instance;
}

>>

transferValuesToEClass(attribute, builderName, eClassName) ::= <<
<if(attribute.optional)>if (<builderName>.<attribute.attributeName>ValueIsSet)
    <endif><eClassName>.set<attribute.attributeName;format="cap">(<builderName>.<attribute.attributeName>Value);
>>

transferListValuesToEClass(attribute, builderName, eClassName) ::= <<
<eClassName>.get<attribute.attributeName;format="cap">().addAll(<builderName>.<attribute.attributeName>Value);
>>

transferOptValuesToEClass(attribute, builderName, eClassName) ::= <<
if (<builderName>.<attribute.attributeName>ValueIsSet) {
    <eClassName>.set<attribute.attributeName;format="cap">(<builderName>.<attribute.attributeName>Value);
}
>>


generateEntryPointMethod(modelClass) ::= <<
/**
* Entrypoint of the <modelClass.className;format="cap">Builder. Use static import in your code for context free DSL using. 
*/
<if(!modelClass.simpleOptionalsOnly)>
public static final <first(modelClass.attributes).attributeName; format="cap">Scope create<modelClass.className;format="cap">() {
    return new <modelClass.className>Builder().<first(modelClass.attributes).attributeName>Scope;
}
<else>
public static final SimpleOptionalsOnlyScope create<modelClass.className;format="cap">() {
    return new <modelClass.className>Builder().simpleOptionalsOnlyScope;
}
<endif>
>>


emfBuildScopeClass(modelClass) ::= <<
/**
    * Building scope class for <modelClass.className>.
    */
    public class <modelClass.className;format="cap">BuildScope {
        <buildEMFObjectMethod(modelClass)>
    }
>>

buildEMFObjectMethod(modelClass) ::= <<
/**
* Build Method for <modelClass.className> instances.
* @return a new <modelClass.className> instance with attributes filled from this builder class.
* @see <modelClass.className>Builder#create<modelClass.className>Instance(builder) create<modelClass.className>Instance - for factory calling
*/
public final <modelClass.className;format="cap"> build<modelClass.className;format="cap">() {
    <modelClass.className>Builder builder = <modelClass.className>Builder.this;
    return create<modelClass.className>Instance(builder);
}
>>

createClassAttribute(classAttribute, attach) ::= <<
<if(classAttribute.optional)>
private boolean <classAttribute.attributeName><attach>IsSet = false;<endif>
<if(classAttribute.list)>
private List\<<classAttribute.type>\> <classAttribute.attributeName><attach> = new ArrayList\<<classAttribute.type>\>();<else>
private <classAttribute.type> <classAttribute.attributeName><attach>;<endif>
>>

createScopeAttribute(classAttribute) ::= <<
private final <classAttribute.attributeName;format="cap">Scope <classAttribute.attributeName>Scope;

>>

instantiateScopeAttributes(classAttribute) ::= <<
this.<classAttribute.attributeName>Scope = this.new <classAttribute.attributeName;format="cap">Scope();

>>

createAttributeScopeClass(className,classAttribute) ::= <<
<if(classAttribute.list)><javaDocListScopeClass(classAttribute)>
<elseif(classAttribute.reference)><javaDocRefernceScopeClass(classAttribute)>
<else><javaDocScopeClass(classAttribute)>
<endif>
public class <classAttribute.attributeName;format="cap">Scope {
    <createAttributeMethod(className,classAttribute)>
    <! foreach simple optional attribute !>
    <classAttribute.nextSimpleOptAttr:{optAttr|<createSimpleOptAttrMethod(className, classAttribute.attributeName, optAttr)>}>
}
>>

simpleOptionalsOnlyScopeClass(modelClass) ::= <<
<javaDocOptOnlyScopeClass(modelClass)>
public class SimpleOptionalsOnlyScope {
    <! foreach simple optional attribute. they must stay in the optioanalsOnly Scope. 
    The build method is not in a seperate Scope so that it can be called anytime since alle attributes are optional!>
    <modelClass.simpleOptAttr:{optAttr|<createSimpleOptAttrMethod(modelClass.className, "simpleOptionalsOnly", optAttr)>}>
    <buildEMFObjectMethod(modelClass)>
}
>>

createAttributeMethod(className,classAttribute) ::= <<
<if(classAttribute.list)><createListMethod(classAttribute.className,classAttribute)>
<else><createSimpleMethod(classAttribute.className,classAttribute)>
<endif>
>>

createSimpleMethod(className, classAttribute) ::= <<
<! for normal attribute setting methods!>
/**
* Method for setting the <classAttribute.attributeName>Value in this builder.
* @return the next scope object
*/
public final <getNextScopeClass(className,classAttribute)> <classAttribute.attributeName>(<classAttribute.type> val) {
    <className;format="cap">Builder.this.<classAttribute.attributeName>Value = val;
    <if(classAttribute.optional)><className;format="cap">Builder.this.<classAttribute.attributeName>ValueIsSet = true;<endif>
    return <className;format="cap">Builder.this.<getNextScopeAttr(className,classAttribute)>;
}
<if(classAttribute.optional)>
/**
* Method for skipping the optional <classAttribute.attributeName> Attribute
* @return the next scope object 
*/
public final <getNextScopeClass(className,classAttribute)> no<classAttribute.attributeName;format="cap">() {
    return <className;format="cap">Builder.this.<getNextScopeAttr(className,classAttribute)>;
}
<endif>
>>

getNextScopeClass(className,classAttribute) ::= <<
<! retrieves the next Scope Class for the Method header !>
<if(classAttribute.lastAttribute)><className;format="cap">BuildScope<else><classAttribute.nextAttribute.attributeName;format="cap">Scope<endif>
>>

getNextScopeAttr(className,classAttribute) ::= <<
<! retrieves the next Scope Attribute for Method return !>
<if(classAttribute.lastAttribute)><className;format="lower">BuildScope<else><classAttribute.nextAttribute.attributeName>Scope<endif>
>>


createSimpleOptAttrMethod(className, scopeName, optionalAttribute) ::= <<
/**
* Setter method for the optional attribute <optionalAttribute.attributeName>
*/
public final <scopeName;format="cap">Scope optional<optionalAttribute.attributeName;format="cap">(<optionalAttribute.type> val) {
    <className;format="cap">Builder.this.<optionalAttribute.attributeName>Value = val;
    <className;format="cap">Builder.this.<optionalAttribute.attributeName>ValueIsSet = true;
    return <className;format="cap">Builder.this.<scopeName>Scope;
}

>>

createListMethod(className, classAttribute) ::= <<
<! for list adding methods !>
/**
* Adds the given <classAttribute.type> object to the <classAttribute.attributeName> List.
* Stays in the same Scope after adding an object so that more objects can be added.
*@param val the <classAttribute.type> object 
*/
public final <classAttribute.attributeName;format="cap">Scope add<classAttribute.attributeName;format="cap">(<classAttribute.type> val) {
    <className;format="cap">Builder.this.<classAttribute.attributeName>Value.add(val);
    return <className;format="cap">Builder.this.<classAttribute.attributeName>Scope;
}
/**
* Ends the adding of <classAttribute.type> objects to the <classAttribute.attributeName> List.
* By calling this method before adding any objects leaves the <classAttribute.attributeName> List empty.
<if(classAttribute.lastAttribute)>
*@return {@link #<className;format="cap">BuildScope}
*@see {@link #add<classAttribute.attributeName;format="cap">}
*/
public final <getNextScopeClass(className,classAttribute)> no<classAttribute.attributeName;format="cap">() {
    return <className;format="cap">Builder.this.<getNextScopeAttr(className,classAttribute)>;
}
<else>*@return {@link #<className;format="cap">Scope}
*@see {@link #add<classAttribute.attributeName;format="cap">}
*/
public final <getNextScopeClass(className,classAttribute)> no<classAttribute.attributeName;format="cap">() {
    return <className;format="cap">Builder.this.<getNextScopeAttr(className,classAttribute)>;
}<endif>

>>



javaDocListScopeClass(classAttribute)::= <<

/**
* Scope Class for the <classAttribute.type> List attribute <classAttribute.attributeName> {@link <classAttribute.className>Builder#get<classAttribute.attributeName;format="cap">}
<if(classAttribute.reference)>*The type of the list of attributes is defined by the model {@link <classAttribute.type>}<endif>
*/
>>
javaDocRefernceScopeClass(classAttribute)::= <<

/**
* Scope Class for the <classAttribute.type> attribute <classAttribute.attributeName> {@link <classAttribute.className>Builder#get<classAttribute.attributeName;format="cap">}.
* The type of the attribute is defined by the model {@link <classAttribute.type>}
*/
>>
javaDocScopeClass(classAttribute)::= <<

/**
* Scope Class for the <classAttribute.type> attribute <classAttribute.attributeName> {@link <classAttribute.className>Builder#get<classAttribute.attributeName;format="cap">}
*/
>>

javaDocOptOnlyScopeClass(modelClass)::= <<

/**
* Scope Class for setting optional attributes of <modelClass.className>
*/
>>
