import "regexBase.stg"

/**
* This template creates the model code and the builder code for a dsl.
* From the DSLGeneration Model one file will be created where the
* model is implemented and the builder is too, as a inner class.
*/



/**
* Creates the ModelCode from the DSLGenerationModel.
*/
Model(packageName, genModel) ::= <<
<! TEMPLATE FOR SEPARETED MODELCLASS!>
package <packageName>;
<! IMPORTS !>
<genModelImports(genModel)>
// builder imports
<rest(genModel.classes):{modelClass|import <packageName>.<genModel.modelName>Builder.<modelClass.className>Builder;
}>
<javaDocRootModelClass(first(genModel.classes),packageName)>
public final class <genModel.modelName>{
	<first(genModel.classes).allAttributes:{attribute|<createClassAttribute(attribute,"")>}>
	<first(genModel.classes).allAttributes:{attribute|<createModelGetter(attribute,"")>}>
	<first(genModel.classes).allAttributes:{attribute|<createModelSetter(attribute)>}>
	<! CONSTRUCTOR FOR ROOT MODEL CLASS !>
	<javaDocConstructorRootModel(first(genModel.classes),packageName)>
	<genModel.modelName>(<genModel.modelName>Builder builder) {
	    <!do not try to transfer opposite attributes that are not creator of opposite relation !>
		<first(genModel.classes).allAttributes:{attribute|<if((attribute.opposite)&&(!attribute.creatorOfOpposite))
		  ><else><transferValues(attribute,"builder")><endif>}>
	}
	<! OTHER MODEL CLASSES INSIDE ROOT MODEL !>
	<rest(genModel.classes):{modelClass|<createModelClass(modelClass)>}>
}

>>


/**
* Creates the Builder code from the DSLGenerationModel.
*/
Builder(packageName, genModel) ::= <<
<! TEMPLATE FOR SEPARETED BUILDER !>
package <packageName>;
<! IMPORTS !>
<genModelImports(genModel)>
<rest(genModel.classes):{modelClass|import <packageName>.<genModel.modelName>.<modelClass.className>;
}>

<! ROOT_BUILDER CLASS !>
/**
* Builder class for {@link <packageName>.<genModel.modelName>} instances.
*
*/
public final class <genModel.modelName>Builder{
    <if(!first(genModel.classes).attributesToSet.empty)>//mandatory attributes
<first(genModel.classes).attributesToSet:{classAttribute|<createClassAttribute(classAttribute,"Value")>}>
    <endif>
    <if(!first(genModel.classes).simpleOptAttr.empty)>//optional attributes
<first(genModel.classes).simpleOptAttr:{opClassAttribute|<createClassAttribute(opClassAttribute,"Value")>}>
    <endif>
    //scope attributes
    <first(genModel.classes).attributesToSet:{classAttribute|<createScopeAttribute(classAttribute)>}>
    private final <genModel.modelName;format="cap">BuildScope <first(genModel.classes).className;format="lower">BuildScope;
    <first(genModel.classes).attributesToSet:{modelAttribute|<createModelGetter(modelAttribute,"Value")>}>
    <first(genModel.classes).simpleOptAttr:{modelAttribute|<createModelGetter(modelAttribute,"Value")>}>
    
    <! Constructor for ClassBuilder !>
    <javaDocBuilderConstructor(first(genModel.classes))>
    private <genModel.modelName;format="cap">Builder() {
    <if(first(genModel.classes).simpleOptionalsOnly)>this.simpleOptionalsOnlyScope = new SimpleOptionalsOnlyScope();
        <else
        >   this.<first(genModel.classes).className;format="lower">BuildScope = new <first(genModel.classes).className>BuildScope();
        <endif>
        <first(genModel.classes).attributesToSet:{classAttribute|<instantiateScopeAttributes(classAttribute)>}>
    }
    <! Entrypoint method for builder!>
    <generateEntryPointMethod(first(genModel.classes))>
    <first(genModel.classes).attributesToSet:{classAttribute|<createAttributeScopeClass(classAttribute)>}>
    <! BUILD SCOPE WITH BUILD METHOD FOR INSTANCE CREATION !>
    <if(first(genModel.classes).simpleOptionalsOnly)><simpleOptionalsOnlyScopeClass(first(genModel.classes))>
    <else><buildScopeClass(first(genModel.classes))>
    <endif>
    <! OTHER BUILDER CLASSES INSIDE THE ROOT BUILDER !>
    <rest(genModel.classes):{modelClass|<createClassBuilder(modelClass)>}>
}

>>

/**
* Creates a ModelClass inside the root model class.
*/
createModelClass(modelClass) ::= <<
/**
* <modelClass.className> Model Class which is part of the <modelClass.model.modelName> Model.
* For instantiation use the static entry point method {@link <modelClass.className>Builder#create<modelClass.className>()}
*
*/
public static class <modelClass.className>{
    <modelClass.allAttributes:{attribute|<createClassAttribute(attribute,"")>}>
    <! constructor !>
    <javaDocConstructorModel(modelClass,packageName)>
    <modelClass.className>(<modelClass.className;format="cap">Builder builder) {
        <!do not try to transfer opposite attributes that are not creator of opposite relation !>
        <modelClass.allAttributes:{attribute|<if((attribute.opposite)&&(!attribute.creatorOfOpposite))
            ><else><transferValues(attribute,"builder")><endif>}>
    }
    <modelClass.allAttributes:{attribute|<createModelGetter(attribute,"")>}>
    <modelClass.allAttributes:{attribute|<createModelSetter(attribute)>}>
}

>>

/**
* transfer values from builder to model.
*/
transferValues(attribute, builderName) ::= <<
<if(attribute.optional)>if(<builderName>.is<attribute.attributeName;format="cap">ValueSet()) {
    this.<attribute.attributeName>IsSet = true;
    <doTransfer(attribute, builderName)>
}<else><doTransfer(attribute, builderName)>
<endif>
>>
/**
* transfer values from builder to model for single valued attributes.
*/
doTransfer(attribute, builderName) ::= <<
<if(attribute.list)><transferListItems(attribute,builderName)><else
>this.set<attribute.attributeName;format="cap">(<builderName>.get<attribute.attributeName;format="cap">Value());<endif>
>>

/**
* transfer values from builder to model for list attributes.
*/
transferListItems(listAttribute,builderName) ::= <<
for(<attribute.type> item : <builderName>.get<attribute.attributeName;format="cap">Value()) {
    this.add<attribute.attributeName;format="cap">(item);
}
>>

/**
* creates the a get method for a ClassAttribute in a model class.
* Is also used to create the get methods in the
* builder class, which is needed because of the
* separation of model and builder.
*/
createModelGetter(attribute,attach) ::= <<
<if(attribute.list)>
/**
* Gets the the list of <attribute.type> attributes.
* @return the <attribute.attributeName>
* @see #<attribute.attributeName>
*/
public List\<<attribute.type>\> get<attribute.attributeName;format="cap"><attach>() {
<else>
/**
* Gets the <attribute.attributeName> attributes.
* @return the <attribute.attributeName>
* @see #<attribute.attributeName>
*/
public <attribute.type> get<attribute.attributeName;format="cap"><attach>() { 
<endif>
    return <attribute.attributeName><attach>;
}
<if(attribute.optional)>
/**
* Gets the value of <attribute.attributeName>.
* @return true if <attribute.attributeName> was set
*/
public boolean is<attribute.attributeName;format="cap"><attach>Set() { 
    return <attribute.attributeName><attach>IsSet;
}<endif>

>>

/**
* Creates a setter method for a ClassAttribute in the model classes.
*/
createModelSetter(attribute) ::= <<
<if(attribute.list)>
/**
* Adds a <attribute.type> attribute to the <attribute.attributeName> list.
* @param <attribute.attributeName> the attribute to add
* @see #<attribute.attributeName>
*/
public void add<attribute.attributeName;format="cap">(<attribute.type> <attribute.attributeName>) {
    this.get<attribute.attributeName;format="cap">().add(<attribute.attributeName>);
}
<endif>
/**
* Sets the <attribute.attributeName> attribute.
* @param <attribute.attributeName> the attribute to add
* @see #<attribute.attributeName>
*/
public void set<attribute.attributeName;format="cap">(<if(attribute.list)>List\<<attribute.type>\><else><attribute.type><endif> <attribute.attributeName>) {
    this.<attribute.attributeName> = <attribute.attributeName>;
}

>>

/**
* Creats a whole inner static builder class for a ModelClass.
*/
createClassBuilder(modelClass) ::= <<
/**
* Builder class for <modelClass.className> instances.
*
*/
public static class <modelClass.className>Builder{
	<if(!modelClass.attributesToSet.empty)>// mandatory, reference and list attributes<endif>
	<!<modelClass.attributesToSet:{classAttribute|<createClassAttribute(classAttribute,"Value")>}>!>
	<modelClass.attributesToSet:{classAttribute|<createClassAttribute(classAttribute,"Value")>}>
	<if(!modelClass.simpleOptAttr.empty)>// simple optional attributes<endif>
	<modelClass.simpleOptAttr:{opClassAttribute|<createClassAttribute(opClassAttribute,"Value")>}>
	// scope references
	<! simpleOptionalsOnly classes dont have build scopes !>
	<if(!modelClass.simpleOptionalsOnly)
	>/**
* 
* Reference for the <modelClass.className;format="cap">Scope.
* Used for object scoping inside the builder.
*/
private final <modelClass.className;format="cap">BuildScope <modelClass.className;format="lower">BuildScope; 
	<endif>
	<modelClass.attributesToSet:{modelAttribute|<createModelGetter(modelAttribute,"Value")>}>
	<!  <modelClass.attributesToSet:{modelAttribute|<createModelGetter(modelAttribute,"Value")>}>!>
	<modelClass.simpleOptAttr:{modelAttribute|<createModelGetter(modelAttribute,"Value")>}>  

<!<modelClass.attributesToSet:{classAttribute|<if(!classAttribute.opposite)><createScopeAttribute(classAttribute)><endif>}>!>
	<modelClass.attributesToSet:{classAttribute|<createScopeAttribute(classAttribute)>}>
	<if(modelClass.simpleOptionalsOnly)>private final SimpleOptionalsOnlyScope simpleOptionalsOnlyScope;<endif>
	<! Constructor for ClassBuilder !>
	<javaDocBuilderConstructor(modelClass)>
	private <modelClass.className;format="cap">Builder() {
		<if(modelClass.simpleOptionalsOnly)>this.simpleOptionalsOnlyScope = new SimpleOptionalsOnlyScope();
		<else
		 >    this.<modelClass.className;format="lower">BuildScope = new <modelClass.className;format="cap">BuildScope();
		<endif>
		<if(!modelClass.attributesToSet.empty)>// attribute Scopes <endif>
		<!<modelClass.attributesToSet:{classAttribute|<if(!classAttribute.opposite)><instantiateScopeAttributes(classAttribute)><endif>}>!>
		<modelClass.attributesToSet:{classAttribute|<instantiateScopeAttributes(classAttribute)>}>
	}

	<generateEntryPointMethod(modelClass)>
<!<modelClass.attributesToSet:{classAttribute|<if((!classAttribute.opposite))><createAttributeScopeClass(classAttribute)><endif>}>!>
	<modelClass.attributesToSet:{classAttribute|<createAttributeScopeClass(classAttribute)>}>

	<if(modelClass.simpleOptionalsOnly)><simpleOptionalsOnlyScopeClass(modelClass)>
	<else><buildScopeClass(modelClass)>
	<endif>
}
>>

/**
* Creates the entrypoint method for a ModelClass object in a builder.
*/
generateEntryPointMethod(modelClass) ::= <<
/**
* Entrypoint of the <modelClass.className;format="cap">Builder. Use static import in your code for context free DSL using. 
*/
<if(!modelClass.simpleOptionalsOnly)>
public static <first(modelClass.attributesToSet).attributeName; format="cap">Scope create<modelClass.className;format="cap">() {
    return new <modelClass.className>Builder().<first(modelClass.attributesToSet).attributeName>Scope;
}
<else>
public static SimpleOptionalsOnlyScope create<modelClass.className;format="cap">() {
    return new <modelClass.className>Builder().simpleOptionalsOnlyScope;
}
<endif>
>>

/**
* Scope Class for the build method of a builder class.
*/
buildScopeClass(modelClass) ::= <<
/**
* Building scope for <modelClass.className>.
*/
public class <modelClass.className;format="cap">BuildScope{
	<buildObjectMethod(modelClass)>
}
>>

/**
* Starts the setting for an opposite attribute.
* The ModelClass needs to set the opposite when the instance of the class ist created.
*/
setOpAttribute(modelClass,opAttributeToSet) ::= <<
<if(opAttributeToSet.opposite.optional)>if(<modelClass.className;format="lower">.is<opAttributeToSet.opposite.attributeName;format="cap">Set()) {
    <doOPSetting(modelClass, opAttributeToSet)>
}
<else><doOPSetting(modelClass, opAttributeToSet)><endif>

>>

/**
* Does the actual opposite setting.
*/ 
doOPSetting(modelClass,opAttributeToSet) ::= <<
<if(opAttributeToSet.opposite.list)>
for(<opAttributeToSet.opposite.type> item : <modelClass.className;format="lower">.get<opAttributeToSet.opposite.attributeName;format="cap">()) {
        item.set<opAttributeToSet.attributeName;format="cap">(<modelClass.className;format="lower">);
}
<else><modelClass.className;format="lower">.get<opAttributeToSet.opposite.attributeName;format="cap">().set<opAttributeToSet.attributeName;format="cap">(<modelClass.className;format="lower">);
<endif>
>>



//
// JavaDoc
//

javaDocConstructorModel(modelClass, packageName) ::= <<
/**
* Private constructor for the model class <modelClass.className>.
* Expects {@link <modelClass.className>Builder} Instance with values set.
* @param builder The builder created by the dsl starting from entry point
* {@link <modelClass.model.modelName>Builder#create<modelClass.className>}
* @return new <modelClass.className> instance with values from the the <modelClass.className>Builder.
*/
>>

javaDocConstructorRootModel(rootModelClass, packageName) ::= <<
/**
* Private constructor for the model class <rootModelClass.className>.
* Expects {@link <rootModelClass.className>Builder} Instance with values set.
* @param builder The builder created by the dsl starting from entry point
* {@link <rootModelClass.className>Builder#create<rootModelClass.className>}
* @return new <rootModelClass.className> instance with values from the the <rootModelClass.className>Builder.
*/
>>

javaDocRootModelClass(rootModelClass, packageName) ::= <<
/**
* <rootModelClass.className> Model Class.
* This model class represents the whole model.
* Therefore other Model Classes in this model are implemented as inner classes.
* To instantiate the model use the entrypoint method in the corresponding builder
* {@link <rootModelClass.className>Builder#create<rootModelClass.className>}
*
*/
>>

javaDocBuilderConstructor(modelClass) ::= <<
/**
* Private constructor for builder class of <modelClass.className>.
* Only instantiated by entry point of this builder class.
* @return new <modelClass.className>Builder instance with
* scope attributes instantiated.
*/
>>


