import "regexBase.stg"

/**
* This template creates the model code and the builder code for a dsl.
* From the DSLGeneration Model one file will be created where the
* model is implemented and the builder is too, as a inner class.
*/

/**
* Creates the whole model and dsl code from the DSLGenerationModel
* genmodel.
*/
ModelTemplate(packageName, genModel) ::= <<
<! TEMPLATE FOR A DSL WITH BUILDER AS INNER CLASS
USED FOR DSLGENERATIONMODEL CREATED WITH PARSER_REGEX!>
package <packageName>;
<genModelImports(genModel)>
<!Create the root model class!>
/**
* <genModel.modelName> Model Class.
* This Class is the root model.
* To create objects use the Builder defined in 
* {@link <genModel.modelName>Builder#create<genModel.modelName>}
*
*/
public final class <genModel.modelName>{
<createModelClass(first(genModel.classes))>
<! Create the the other model classes inside the root model class!>
<rest(genModel.classes):{modelClass|<createModelClass(modelClass)>}>
}

>>

/**
* Creates the other model classes inside the root model class
*/
createModelClass(modelClass) ::= <<
<! For the root model class the class definition is another one !>
<if(!modelClass.rootModelClass)>
<javaDocModelClass(modelClass)>
public final static class <modelClass.className>{
<endif>
    <modelClass.allAttributes:{attribute|<createClassAttribute(attribute,"")>}>
    /**
    * Instantiation only through
    * {@link <modelClass.className>Builder#create<modelClass.className>}.
    */
    private  <modelClass.className>() { };
    <! constructor with builder!>
    <javaDocModelClassConstructor(modelClass)>
    private <modelClass.className>(<modelClass.className>Builder builder) {
        <!do not try to transfer opposite attributes that are not creator of opposite relation !>
        <modelClass.allAttributes:{attribute|<if((attribute.opposite)&&(!attribute.creatorOfOpposite))
            ><else><transferValues(attribute,"builder")><endif>}>
    }
    <modelClass.allAttributes:{attribute|<createModelGetter(attribute)>}>
    <modelClass.allAttributes:{attribute|<createModelSetter(attribute)>}>
    
    <createClassBuilder(modelClass)>
    
<if(!modelClass.rootModelClass)>
}
<endif>

>>

/**
* creates the builder class inside its corresponding modelclass.
*/
createClassBuilder(modelClass) ::= <<

/**
* Builder class for {@link <modelClass.className>} instances.
*
*/
public static final class <modelClass.className>Builder{
    <if(!modelClass.attributesToSet.empty)>
    /*
    * mandatory, reference and list attributes
    */<endif>
    <!<modelClass.attributesToSet:{classAttribute|<createClassAttribute(classAttribute,"Value")>}>!>
    <modelClass.attributesToSet:{classAttribute|<createClassAttribute(classAttribute,"Value")>}>
    <if(!modelClass.simpleOptAttr.empty)>
    /*
    * simple optional attributes
    */<endif>
    <modelClass.simpleOptAttr:{opClassAttribute|<createClassAttribute(opClassAttribute,"Value")>}>
    /*
    * scope references
    */ 
    <! simpleOptionalsOnly classes dont have build scopes !>
    <if(!modelClass.simpleOptionalsOnly)>
    /** 
    * Reference for the <modelClass.className;format="cap">Scope.
    * Used for object scoping inside the builder.
    */
    private final <modelClass.className>BuildScope <modelClass.className;format="lower">BuildScope;<endif>
    <!<modelClass.attributesToSet:{classAttribute|<createScopeAttribute(classAttribute)>}>!>
    <modelClass.attributesToSet:{classAttribute|<createScopeAttribute(classAttribute)>}>
    <if(modelClass.simpleOptionalsOnly)>private final SimpleOptionalsOnlyScope simpleOptionalsOnlyScope;<endif>
    <! Constructor for ClassBuilder !>
    <javaDocBuilderConstructor(modelClass)>
    private <modelClass.className>Builder() {
        <if(modelClass.simpleOptionalsOnly)>this.simpleOptionalsOnlyScope = new SimpleOptionalsOnlyScope();
        <else>
this.<modelClass.className;format="lower">BuildScope = new <modelClass.className>BuildScope();
        <endif>
        <modelClass.attributesToSet:{classAttribute|<instantiateScopeAttributes(classAttribute)>}>
        <!<modelClass.attributesToSet:{classAttribute|<instantiateScopeAttributes(classAttribute)>}>!>
    }
    <! If it is the root Model class all Entrypoint Methods are generated here !>
    <if(modelClass.rootModelClass)><generateAllEntryPointMethods(modelClass)><endif>
    <! opposite attributes doesnt have scope classes and setter methods!>
    <!<modelClass.attributesToSet:{classAttribute|<if((!classAttribute.opposite))><createAttributeScopeClass(classAttribute)><endif>}>!>
    <modelClass.attributesToSet:{classAttribute|<createAttributeScopeClass(classAttribute)>}>
    <if(modelClass.simpleOptionalsOnly)><simpleOptionalsOnlyScopeClass(modelClass)>
    <else><buildScopeClass(modelClass)>
    <endif>
}
>>

/**
* transfer values from builder to model.
*/
transferValues(attribute, builderName) ::= <<
<if(attribute.optional)>if(<builderName>.<attribute.attributeName>ValueIsSet) {
	this.<attribute.attributeName>IsSet = true;
    <doTransfer(attribute, builderName)>
}<else><doTransfer(attribute, builderName)>
<endif>
>>

/**
* transfer values from builder to model for single valued attributes.
*/
doTransfer(attribute, builderName) ::= <<
<if(attribute.list)><transferListItems(attribute,builderName)><else
>this.set<attribute.attributeName;format="cap">(<builderName>.<attribute.attributeName>Value);<endif>
>>

/**
* transfer values from builder to model for list attributes.
*/
transferListItems(listAttribute,builderName) ::= <<
for(<attribute.type> item : <builderName>.<attribute.attributeName>Value) {
    this.add<attribute.attributeName;format="cap">(item);
}
>>


/**
* creates the a get method for a ClassAttribute in a model class.
*/
createModelGetter(attribute) ::= <<
<if(attribute.list)>
/**
* Gets the list of <attribute.type> attributes.
* @return the <attribute.attributeName>
*@see #<attribute.attributeName>
*/
public List\<<attribute.type>\> get<attribute.attributeName;format="cap">() {
<else>
/**
* Gets the <attribute.attributeName> attributes.
* @return the <attribute.attributeName>
*@see #<attribute.attributeName>
*/
public <attribute.type> get<attribute.attributeName;format="cap">() { 
<endif>
	return <attribute.attributeName>;
}
<if(attribute.optional)>
/**
* Flag for {@link <attribute.attributeName>}.
* @return true if <attribute.attributeName> was set
*/
public boolean is<attribute.attributeName;format="cap">Set() { 
	return <attribute.attributeName>IsSet;
}<endif>

>>

/**
* Creates a setter method for a ClassAttribute in the model classes.
*/
createModelSetter(attribute) ::= <<
<if(attribute.list)>
/**
* Adds a <attribute.type> attribute to the <attribute.attributeName> list.
*@param <attribute.attributeName> the attribute to add
*@see  #<attribute.attributeName>
*/
private void add<attribute.attributeName;format="cap">(<attribute.type> <attribute.attributeName>) {
	this.get<attribute.attributeName;format="cap">().add(<attribute.attributeName>);
}
<else>
/**
* Setter for the <attribute.attributeName> attribute.
*@param <attribute.attributeName> the attribute to set
*@see #<attribute.attributeName>
*/
private void set<attribute.attributeName;format="cap">(<attribute.type> <attribute.attributeName>) {
	this.<attribute.attributeName> = <attribute.attributeName>;
}
<endif>
>>

/**
* creates all the entrypoint methods inside the root model class.
*/ 
generateAllEntryPointMethods(modelClass) ::= <<
<modelClass.model.classes:{otherModelClass|<generateEntryPointMethod(otherModelClass)>}>
>>

/**
* creates a single entrypoint methods for a ModelClasses Builder.
*/ 
generateEntryPointMethod(modelClass) ::= <<

/**
* Entrypoint of the <modelClass.className;format="cap">Builder.
<if(modelClass.rootModelClass)>* Since the <modelClass.className> is the root class, this is the entrypoint of the DSL.<endif>
* Use static import in your code for context free DSL using.
*@return the first scope class of the <modelClass.className>Builder
*/
<if(!modelClass.simpleOptionalsOnly)>
public static <modelClass.className>.<modelClass.className>Builder.<first(modelClass.attributesToSet).attributeName; format="cap">Scope create<modelClass.className;format="cap">() {
	return new <modelClass.className>.<modelClass.className>Builder().<first(modelClass.attributesToSet).attributeName>Scope;
}
<else>

/**
* Entrypoint of the <modelClass.className;format="cap">Builder.
<if(modelClass.rootModelClass)>* Since the <modelClass.className> is the root class, this is the entrypoint of the DSL.<endif> 
* Use static import in your code for context free DSL using.
*@return the only Scope Class of the <modelClass.className>Builder
*/
public static <modelClass.className>.<modelClass.className>Builder.SimpleOptionalsOnlyScope create<modelClass.className;format="cap">() {
	return new <modelClass.className>.<modelClass.className>Builder().simpleOptionalsOnlyScope;
}
<endif>
>>


/**
* creates the builder scope class.
*/
buildScopeClass(modelClass) ::= <<

/**
* Scope class for building a <modelClass.className> object.
*/
public final class <modelClass.className;format="cap">BuildScope{
	<buildObjectMethod(modelClass)>
}
>>



/**
* Starts the setting for an opposite attribute.
* The ModelClass needs to set the opposite when the instance of the class ist created.
*/
setOpAttribute(modelClass,opAttributeToSet) ::= <<
<if(opAttributeToSet.opposite.optional)>if(<modelClass.className;format="lower">.<opAttributeToSet.opposite.attributeName>IsSet) {
    <doOPSetting(modelClass, opAttributeToSet)>
}
<else><doOPSetting(modelClass, opAttributeToSet)><endif>

>>

/**
* does the actual opposite setting.
*/
doOPSetting(modelClass,opAttributeToSet) ::= <<
<if(opAttributeToSet.opposite.list)>
for(<opAttributeToSet.opposite.type> item : <modelClass.className;format="lower">.<opAttributeToSet.opposite.attributeName>) {
    item.set<opAttributeToSet.attributeName;format="cap">(<modelClass.className;format="lower">);
}
<else><modelClass.className;format="lower">.<opAttributeToSet.opposite.attributeName>.set<opAttributeToSet.attributeName;format="cap">(<modelClass.className;format="lower">);
<endif>
>>





//
// JavaDoc
//

javaDocModelClass(modelClass) ::= <<
/**
* <modelClass.className> Model Class which is part of the <modelClass.className> Model.
* For instantiation use the static entry point method {@link <modelClass.className>Builder#create<modelClass.className>()}
*
*/
>>

javaDocModelClassConstructor(modelClass) ::= <<
/**
* Private constructor for the model class <modelClass.className>.
* Expects {@link #<modelClass.className>Builder} Instance with values set.
* @param builder The builder created by the dsl, starting from entry point
* {@link <modelClass.className>Builder#create<modelClass.className>}
* @return new <modelClass.className> instance with values transferred from the the <modelClass.className>Builder.
*/
>>

javaDocBuilderConstructor(modelClass) ::= <<
/**
* Private constructor for builder class of <modelClass.className>.
* Only instantiated by entry point of this builder class.
* scope attributes instantiated.
*/
>>

