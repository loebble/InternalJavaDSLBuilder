ModelTemplate(packageName, genModel) ::= <<
<! Template for DSLGenerationModel DSL built with a CreatorRegex.
Creates the whole model along with its classes and their intern Builder class for instantiation!>
package <packageName>;
<if(!genModel.imports.empty)>// user defined imports<endif>
<genModel.imports:{imp| import <imp>;<\n>}>
<if(genModel.hasList)>
// imports for List using
import java.util.List;
import java.util.ArrayList;
<endif>
<!Create the root model class!>
/**
* <genModel.modelName> Model Class.
* This Class is the root model.
* To create objects use the Builder defined in 
* {@link <genModel.modelName>Builder#create<genModel.modelName>}
*
*/
public class <genModel.modelName>{
<createModelClass(genModel.classes.(first(genModel.classes.keys)))>
<! Create the the other model classes !>
<rest(genModel.classes.keys):{className|<createModelClass(genModel.classes.(className))>}>
}

>>

createModelClass(modelClass) ::= <<
<! For the root model class the class definition is given !>
<if(!modelClass.rootModelClass)>
/**
* <modelClass.className> Model Class which is part of the <modelClass.className> Model.
* For instantiation use the static entry point method {@link <modelClass.className>Builder#create<modelClass.className>()}
*
*/
public static class <modelClass.className>{
<endif>
    <modelClass.attributes:{attribute|<createClassAttribute(attribute,"")>}>
    <modelClass.simpleOptAttr:{attribute|<createClassAttribute(attribute,"")>}>
    
    <! constructor !>
    /**
    * Private constructor for the model class <modelClass.className>.
    * Expects an {@link #<modelClass.className>Builder} Instance with values set.
    * @param builder The builder created by the dsl starting from entry point
    * {@link <modelClass.className>Builder#create<modelClass.className>}
    * @return new <modelClass.className> instance with values from the the <modelClass.className>Builder.
    */
    private <modelClass.className> (<modelClass.className>Builder builder){
        <modelClass.attributes:{attribute|<if(!attribute.opposite)><transferValues(attribute,"builder")><endif>}>
        <modelClass.simpleOptAttr:{attribute|<transferOptValues(attribute,"builder")>}>
    }
    
    <modelClass.attributes:{attribute|<createModelGetter(attribute)>}>
    <modelClass.simpleOptAttr:{attribute|<createModelGetter(attribute)>}>
    <modelClass.attributes:{attribute|<createModelSetter(attribute)>}>
    <modelClass.simpleOptAttr:{attribute|<createModelSetter(attribute)>}>
    
    <createClassBuilder(modelClass)>
    
<if(!modelClass.rootModelClass)>
}
<endif>

>>

createClassBuilder(modelClass) ::= <<

/**
* Builder class for {@link <modelClass.className>} instances.
*
*/
public static final class <modelClass.className>Builder{
    <if(!modelClass.attributes.empty)>// mandatory, reference and list attributes<endif>
    <modelClass.attributes:{classAttribute|<if(!classAttribute.opposite)><createClassAttribute(classAttribute,"Value")><endif>}>
    <if(!modelClass.simpleOptAttr.empty)>// simple optional attributes<endif>
    <modelClass.simpleOptAttr:{opClassAttribute|<createClassAttribute(opClassAttribute,"Value")>}>
    // scope references
    <! simpleOptionalsOnly classes dont have build scopes !>
    <if(!modelClass.simpleOptionalsOnly)>private final <modelClass.className>BuildScope <modelClass.className;format="lower">BuildScope; <endif>
    <modelClass.attributes:{classAttribute|<if(!classAttribute.opposite)><createScopeAttribute(classAttribute)><endif>}>
    <if(modelClass.simpleOptionalsOnly)>private final SimpleOptionalsOnlyScope simpleOptionalsOnlyScope;<endif>
    <! Constructor for ClassBuilder !>
    
    /**
    * Private constructor for builder class of <modelClass.className>.
    * Only instantiated by entry point of this builder class.
    * @return new <modelClass.className>Builder instance with
    * scope attributes instantiated.
    */
    private <modelClass.className>Builder(){
        <if(modelClass.simpleOptionalsOnly)>this.simpleOptionalsOnlyScope = new SimpleOptionalsOnlyScope();
        <else>
// building Scope
this.<modelClass.className;format="lower">BuildScope = new <modelClass.className>BuildScope();
        <endif>
        <if(!modelClass.attributes.empty)>// attribute Scopes <endif>
        <modelClass.attributes:{classAttribute|<if(!classAttribute.opposite)><instantiateScopeAttributes(classAttribute)><endif>}>
    }
    
    <if(modelClass.rootModelClass)><generateAllEntryPointMethods(modelClass)><endif>
    <! only create ScopeClass and attribute method if it isnt a opposite attribute !>
    <modelClass.attributes:{classAttribute|<if((!classAttribute.opposite))><createAttributeScopeClass(modelClass.className,classAttribute,modelClass.model)><endif>}>
    <if(modelClass.simpleOptionalsOnly)><simpleOptionalsOnlyScopeClass(modelClass)>
    <else><buildScopeClass(modelClass)>
    <endif>
}
>>

createModelAttribute(classAttribute) ::= <<
<if(!classAttribute.optional)>
private <classAttribute.attributeName>IsSet;<endif>
<if(classAttribute.list)>private List\<<classAttribute.type>\> <classAttribute.attributeName>;<else>
private <classAttribute.type> <classAttribute.attributeName>;<endif>
>>



transferValues(attribute, builderName) ::= <<
<if(attribute.optional)>if(<builderName>.<attribute.attributeName>ValueIsSet)<endif>
this.set<attribute.attributeName;format="cap">(<builderName>.<attribute.attributeName>Value);
>>

transferOptValues(attribute, builderName) ::= <<
if(<builderName>.<attribute.attributeName>ValueIsSet){
	this.<attribute.attributeName>IsSet = true;
	this.set<attribute.attributeName;format="cap">(<builderName>.<attribute.attributeName>Value);
}
>>

createModelGetter(attribute) ::= <<
<if(attribute.list)>
/**
* Getter for the list of <attribute.type> attributes.
*@see {@link #<attribute.attributeName>}
*/
public List\<<attribute.type>\> get<attribute.attributeName;format="cap">(){
<else>
/**
* Getter for the <attribute.attributeName> attributes.
*@see {@link #<attribute.attributeName>}
*/
public <attribute.type> get<attribute.attributeName;format="cap">(){ 
<endif>
	return <attribute.attributeName>;
}
<if(attribute.optional)>
/**
* Setter for the list of <attribute.type> attributes.
*@see {@link #<attribute.attributeName>}
@return true if <attribute.attributeName> was set
*/
public boolean is<attribute.attributeName;format="cap">Set(){ 
	return <attribute.attributeName>IsSet;
}<endif>

>>

createModelSetter(attribute) ::= <<
<if(attribute.list)>
/**
* Adds a <attribute.type> attribute to the <attribute.attributeName> list.
*@param <attribute.attributeName> the attribute to add
*@see {@link #<attribute.attributeName>}
*/
public void add<attribute.attributeName;format="cap">(<attribute.type> <attribute.attributeName>){
	this.get<attribute.attributeName;format="cap">().add(<attribute.attributeName>);
}
<endif>
/**
* Setter for the <attribute.attributeName> attribute.
*@see {@link #<attribute.attributeName>}
*/
public void set<attribute.attributeName;format="cap">(<if(attribute.list)>List\<<attribute.type>\><else><attribute.type><endif> <attribute.attributeName>){
	this.<attribute.attributeName> = <attribute.attributeName>;
}

>>

generateAllEntryPointMethods(modelClass) ::= <<
<modelClass.model.classes.keys:{className|<generateEntryPointMethod(modelClass.model.classes.(className))>}>
>>

generateEntryPointMethod(modelClass) ::= <<

/**
* Entrypoint of the <modelClass.className;format="cap">Builder.
<if(modelClass.rootModelClass)>* Since the <modelClass.className> is the root class, this is the entrypoint of the DSL.<endif>
* Use static import in your code for context free DSL using.
*@return the first scope class of the <modelClass.className>Builder
*/
<if(!modelClass.simpleOptionalsOnly)>
public static <modelClass.className>.<modelClass.className>Builder.<first(modelClass.attributes).attributeName; format="cap">Scope create<modelClass.className;format="cap">(){
	return new <modelClass.className>.<modelClass.className>Builder().<first(modelClass.attributes).attributeName>Scope;
}
<else>

/**
* Entrypoint of the <modelClass.className;format="cap">Builder.
<if(modelClass.rootModelClass)>* Since the <modelClass.className> is the root class, this is the entrypoint of the DSL.<endif> 
* Use static import in your code for context free DSL using.
*@return the only Scope Class of the <modelClass.className>Builder
*/
public static <modelClass.className>.<modelClass.className>Builder.SimpleOptionalsOnlyScope create<modelClass.className;format="cap">(){
	return new <modelClass.className>.<modelClass.className>Builder().simpleOptionalsOnlyScope;
}
<endif>
>>



buildScopeClass(modelClass) ::= <<

/**
	* Building scope for <modelClass.className>.
	*/
	public class <modelClass.className;format="cap">BuildScope{
		<buildObjectMethod(modelClass)>
	}
>>

buildObjectMethod(modelClass) ::= <<

/**
* Build Method for <modelClass.className> instances.
* @return a new <modelClass.className> instance with attributes filled from this builder class.
*/
public <modelClass.className;format="cap"> build<modelClass.className;format="cap">() {
	<modelClass.className;format="cap"> <modelClass.className;format="lower"> = new <modelClass.className;format="cap">(<modelClass.className;format="cap">Builder.this);
	<modelClass.createdByOpposite:{nestedAttributeRef|<setOpAttribute(modelClass,nestedAttributeRef)>}>
	return <modelClass.className;format="lower">;
}
>>

setOpAttribute(modelClass,nestedAttributeRef) ::= <<
<! if a list attribute is referenced by an opposite attribute, 
the opposite relation for every list item has to be set !>
<if(nestedAttributeRef.opposite.list)>
for (<nestedAttributeRef.opposite.type> item : <modelClass.className;format="lower">.<nestedAttributeRef.opposite.attributeName>) {
	item.set<nestedAttributeRef.attributeName;format="cap">(<modelClass.className;format="lower">);
}
<else><modelClass.className;format="lower">.<nestedAttributeRef.opposite.attributeName>.set<nestedAttributeRef.attributeName;format="cap">(<modelClass.className;format="lower">);
<endif>
>>

createClassAttribute(classAttribute, attach) ::= <<
<if(classAttribute.optional)>

/**
* Flag for {@link <classAttribute.attributeName><attach>}.
* Is true if <classAttribute.attributeName><attach> was set.
*/
private boolean <classAttribute.attributeName><attach>IsSet = false;<endif>
<if(classAttribute.list)>

/**
* List of {@link <classAttribute.attributeName><attach>}
* for multiple <classAttribute.type> values.
*/
private List\<<classAttribute.type>\> <classAttribute.attributeName><attach> = new ArrayList\<<classAttribute.type>\>();<else>

/**
* <classAttribute.attributeName> value of the model class.
*/
private <classAttribute.type> <classAttribute.attributeName><attach>;<endif>
>>

createScopeAttribute(classAttribute) ::= <<

/**
* Reference for the <classAttribute.attributeName;format="cap">Scope.
* Used for object scoping inside the builder.
*/
private final <classAttribute.attributeName;format="cap">Scope <classAttribute.attributeName>Scope;

>>

instantiateScopeAttributes(classAttribute) ::= <<
this.<classAttribute.attributeName>Scope = this.new <classAttribute.attributeName;format="cap">Scope();

>>

createAttributeScopeClass(className,classAttribute, genModel) ::= <<
<if(classAttribute.list)><javaDocListScopeClass(classAttribute)>
<elseif(classAttribute.reference)><javaDocRefernceScopeClass(classAttribute)>
<else><javaDocScopeClass(classAttribute)>
<endif>
public class <classAttribute.attributeName;format="cap">Scope{
	<createAttributeMethod(className,classAttribute,genModel.modelName)>
	<! foreach simple optional attribute !>
	<classAttribute.nextSimpleOptAttr:{optAttr|<createOptionalAttributeMethod(className, classAttribute.attributeName, optAttr)>}>
}
>>

simpleOptionalsOnlyScopeClass(modelClass) ::= <<
<javaDocOptOnlyScopeClass(modelClass)>
public class SimpleOptionalsOnlyScope{
	<! foreach simple optional attribute. they must stay in the optioanalsOnly Scope. 
	The build method is not in a seperate Scope so that it can be called anytime since alle attributes are optional!>
	<modelClass.simpleOptAttr:{optAttr|<createOptionalAttributeMethod(modelClass.className, "simpleOptionalsOnly", optAttr)>}>
	<buildObjectMethod(modelClass)>
}
>>

createAttributeMethod(className,classAttribute,modelName) ::= <<
<if(classAttribute.list)><createListMethod(classAttribute.className,classAttribute,modelName)>
<elseif (!classAttribute.opposite)><createSimpleMethod(classAttribute.className,classAttribute,modelName)>
<endif>
>>

createSimpleMethod(className, classAttribute, modelName) ::= <<
<! for normal attribute setting methods!>

/**
* Method for setting the <classAttribute.attributeName>Value in this builder.
* @return the next scope object
*/
public <getNextScopeClass(className,classAttribute)> <classAttribute.attributeName> (<classAttribute.type> val){
	<className;format="cap">Builder.this.<classAttribute.attributeName>Value = val;
	<if(classAttribute.optional)><className;format="cap">Builder.this.<classAttribute.attributeName>ValueIsSet = true;<endif>
	return <className;format="cap">Builder.this.<getNextScopeAttr(className,classAttribute)>;
}
<if(classAttribute.optional)>

/**
* Method for skipping the optional <classAttribute.attributeName> Attribute
* @return the next scope object 
*/
public <getNextScopeClass(className,classAttribute)> no<classAttribute.attributeName;format="cap"> (){
	return <className;format="cap">Builder.this.<getNextScopeAttr(className,classAttribute)>;
}
<endif>
>>

createOPPMethod(className,classAttribute,modelName) ::= <<
<! for opposite methods !>

/**
* Method for the Opposite Attribute <classAttribute.attributeName>. It will be set by its opposite if it has one.
* @return the next scope object
*/
public <getNextScopeClass(className,classAttribute)> <classAttribute.attributeName> (){
	return <className;format="cap">Builder.this.<getNextScopeAttr(className,classAttribute)>;
}
>>


getNextScopeClass(className,classAttribute) ::= <<
<! retrieves the next Scope Class for the Method header !>
<if(classAttribute.lastAttribute)><className;format="cap">BuildScope<else><classAttribute.nextAttribute.attributeName;format="cap">Scope<endif>
>>

getNextScopeAttr(className,classAttribute) ::= <<
<! retrieves the next Scope Attribute for Method return !>
<if(classAttribute.lastAttribute)><className;format="lower">BuildScope<else><classAttribute.nextAttribute.attributeName>Scope<endif>
>>


createOptionalAttributeMethod(className, scopeName, optionalAttribute) ::= <<

/**
* Setter method for the optional attribute <optionalAttribute.attributeName>
*/
public <scopeName;format="cap">Scope optional<optionalAttribute.attributeName;format="cap">(<optionalAttribute.type> val){
	<className;format="cap">Builder.this.<optionalAttribute.attributeName>Value = val;
	<className;format="cap">Builder.this.<optionalAttribute.attributeName>ValueIsSet = true;
	return <className;format="cap">Builder.this.<scopeName>Scope;
}
>>

createListMethod(className, classAttribute, optionalAttribute) ::= <<
<! for list adding methods !>

/**
* Adds the given <classAttribute.type> object to the <classAttribute.attributeName> List.
* Stays in the same Scope after adding an object so that more objects can be added.
*@param val the <classAttribute.type> object 
*/
public <classAttribute.attributeName;format="cap">Scope add<classAttribute.attributeName;format="cap"> (<classAttribute.type> val){
	<className;format="cap">Builder.this.<classAttribute.attributeName>Value.add(val);
	return <className;format="cap">Builder.this.<classAttribute.attributeName>Scope;
}

/**
* Ends the adding of <classAttribute.type> objects to the <classAttribute.attributeName> List.
* By calling this method before adding any objects it leaves the <classAttribute.attributeName> List empty.
<if(classAttribute.lastAttribute)>
*@return {@link #<className;format="cap">BuildScope}
*@see {@link #add<classAttribute.attributeName;format="cap">}
*/
public <getNextScopeClass(className,classAttribute)> no<classAttribute.attributeName;format="cap"> (){
	return <className;format="cap">Builder.this.<getNextScopeAttr(className,classAttribute)>;
}
<else>*@return {@link #<className;format="cap">Scope}
*@see {@link #add<classAttribute.attributeName;format="cap">}
*/
public <getNextScopeClass(className,classAttribute)> no<classAttribute.attributeName;format="cap"> (){
	return <className;format="cap">Builder.this.<getNextScopeAttr(className,classAttribute)>;
}<endif>

>>



javaDocListScopeClass(classAttribute)::= <<

/**
* Scope Class for the <classAttribute.type> List attribute <classAttribute.attributeName> {@link <classAttribute.className>Builder#get<classAttribute.attributeName;format="cap">}
<if(classAttribute.reference)>*The type of the list of attributes is defined by the model {@link <classAttribute.type>}<endif>
*/
>>
javaDocRefernceScopeClass(classAttribute)::= <<

/**
* Scope Class for the <classAttribute.type> attribute <classAttribute.attributeName> {@link <classAttribute.className>Builder#get<classAttribute.attributeName;format="cap">}.
* The type of the attribute is defined by the model {@link <classAttribute.type>}
*/
>>
javaDocScopeClass(classAttribute)::= <<

/**
* Scope Class for the <classAttribute.type> attribute <classAttribute.attributeName> {@link <classAttribute.className>Builder#get<classAttribute.attributeName;format="cap">}
*/
>>

javaDocOptOnlyScopeClass(modelClass)::= <<

/**
* Scope Class for setting optional attributes of <modelClass.className>
*/
>>
